package validation

var SchemaJson = `
{
	"$schema": "http://json-schema.org/schema#",   "additionalProperties": false,
	"type": "object",
	"description": "Main kedge file structure defining whole application",
	"properties": {
		"volumeClaims": {
			"items": {
				"additionalProperties": false,
				"description": "VolumeClaim is used to define Persistent Volumes for app",
				"properties": {
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"volumeName": {
						"type": [
							"string",
							"null"
						],
						"description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"size": {
						"type": [
							"string",
							"null"
						],
						"description": "Size of persistent volume"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"resources": {
						"additionalProperties": false,
						"description": "ResourceRequirements describes the compute resource requirements.",
						"properties": {
							"requests": {
								"additionalProperties": {
									"oneOf": [
										{
											"type": [
												"string",
												"null"
											]
										},
										{
											"type": "integer"
										}
									]
								},
								"type": "object",
								"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
							},
							"limits": {
								"additionalProperties": {
									"oneOf": [
										{
											"type": [
												"string",
												"null"
											]
										},
										{
											"type": "integer"
										}
									]
								},
								"type": "object",
								"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
							}
						}
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"selector": {
						"additionalProperties": false,
						"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
						"properties": {
							"matchLabels": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
							},
							"matchExpressions": {
								"items": {
									"additionalProperties": false,
									"required": [
										"key",
										"operator"
									],
									"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
									"properties": {
										"operator": {
											"type": "string",
											"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
										},
										"values": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
										},
										"key": {
											"x-kubernetes-patch-merge-key": "key",
											"type": "string",
											"description": "key is the label key that the selector applies to.",
											"x-kubernetes-patch-strategy": "merge"
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
							}
						}
					},
					"accessModes": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"storageClassName": {
						"type": [
							"string",
							"null"
						],
						"description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of volume that should be mounted on the pod."
		},
		"ingresses": {
			"items": {
				"additionalProperties": false,
				"description": "IngressSpecMod defines Kubernetes Ingress object",
				"properties": {
					"tls": {
						"items": {
							"additionalProperties": false,
							"description": "IngressTLS describes the transport layer security associated with an Ingress.",
							"properties": {
								"hosts": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified."
								},
								"secretName": {
									"type": [
										"string",
										"null"
									],
									"description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing."
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI."
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"rules": {
						"items": {
							"additionalProperties": false,
							"description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
							"properties": {
								"host": {
									"type": [
										"string",
										"null"
									],
									"description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The : delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue."
								},
								"http": {
									"additionalProperties": false,
									"required": [
										"paths"
									],
									"description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
									"properties": {
										"paths": {
											"items": {
												"additionalProperties": false,
												"required": [
													"backend"
												],
												"description": "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
												"properties": {
													"path": {
														"type": [
															"string",
															"null"
														],
														"description": "Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend."
													},
													"backend": {
														"additionalProperties": false,
														"required": [
															"serviceName",
															"servicePort"
														],
														"description": "IngressBackend describes all endpoints for a given service and port.",
														"properties": {
															"serviceName": {
																"type": "string",
																"description": "Specifies the name of the referenced service."
															},
															"servicePort": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													}
												}
											},
											"type": "array",
											"description": "A collection of paths that map requests to backends."
										}
									}
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend."
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"backend": {
						"additionalProperties": false,
						"required": [
							"serviceName",
							"servicePort"
						],
						"description": "IngressBackend describes all endpoints for a given service and port.",
						"properties": {
							"serviceName": {
								"type": "string",
								"description": "Specifies the name of the referenced service."
							},
							"servicePort": {
								"oneOf": [
									{
										"type": [
											"string",
											"null"
										]
									},
									{
										"type": "integer"
									}
								]
							}
						}
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of Kubernetes Ingress"
		},
		"uid": {
			"type": [
				"string",
				"null"
			],
			"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
		},
		"generation": {
			"type": "integer",
			"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
			"format": "int64"
		},
		"deletionGracePeriodSeconds": {
			"type": "integer",
			"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
			"format": "int64"
		},
		"labels": {
			"additionalProperties": {
				"type": [
					"string",
					"null"
				]
			},
			"type": "object",
			"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
		},
		"services": {
			"items": {
				"additionalProperties": false,
				"description": "ServiceSpecMod is used to define Kubernetes service",
				"properties": {
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"externalTrafficPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading."
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"loadBalancerSourceRanges": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/"
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"loadBalancerIP": {
						"type": [
							"string",
							"null"
						],
						"description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"sessionAffinity": {
						"type": [
							"string",
							"null"
						],
						"description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"clusterIP": {
						"type": [
							"string",
							"null"
						],
						"description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
					},
					"type": {
						"type": [
							"string",
							"null"
						],
						"description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"selector": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/"
					},
					"externalName": {
						"type": [
							"string",
							"null"
						],
						"description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"externalIPs": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system."
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"portMappings": {
						"type": [
							"array",
							"null"
						],
						"description": "The list of portMappings, where each portMapping allows specifying port, targetPort and protocol in the format '<port>:<targetPort>/<protocol>'"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"healthCheckNodePort": {
						"type": "integer",
						"description": "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
						"format": "int32"
					},
					"ports": {
						"items": {
							"additionalProperties": false,
							"required": [
								"port"
							],
							"description": "ServicePortMod is used to define Kubernetes service's port",
							"properties": {
								"endpoint": {
									"type": [
										"string",
										"null"
									],
									"description": "Host to create ingress automatically. Endpoint allows specifying an ingress resource in the format '<Host>/<Path>'"
								},
								"protocol": {
									"type": [
										"string",
										"null"
									],
									"description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service."
								},
								"nodePort": {
									"type": "integer",
									"description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
									"format": "int32"
								},
								"targetPort": {
									"oneOf": [
										{
											"type": [
												"string",
												"null"
											]
										},
										{
											"type": "integer"
										}
									]
								},
								"port": {
									"type": "integer",
									"description": "The port that will be exposed by this service.",
									"format": "int32"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of Kubernetes Services"
		},
		"generateName": {
			"type": [
				"string",
				"null"
			],
			"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
		},
		"creationTimestamp": {
			"type": [
				"string",
				"null"
			],
			"format": "date-time"
		},
		"namespace": {
			"type": [
				"string",
				"null"
			],
			"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
		},
		"deployments": {
			"items": {
				"additionalProperties": false,
				"required": [
					"containers"
				],
				"description": "DeploymentSpecMod is Kedge's extension of Kubernetes DeploymentSpec",
				"properties": {
					"dnsPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"paused": {
						"type": "boolean",
						"description": "Indicates that the deployment is paused."
					},
					"restartPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"strategy": {
						"additionalProperties": false,
						"description": "DeploymentStrategy describes how to replace existing pods with new ones.",
						"properties": {
							"rollingUpdate": {
								"additionalProperties": false,
								"description": "Spec to control the desired behavior of rolling update.",
								"properties": {
									"maxSurge": {
										"oneOf": [
											{
												"type": [
													"string",
													"null"
												]
											},
											{
												"type": "integer"
											}
										]
									},
									"maxUnavailable": {
										"oneOf": [
											{
												"type": [
													"string",
													"null"
												]
											},
											{
												"type": "integer"
											}
										]
									}
								}
							},
							"type": {
								"type": [
									"string",
									"null"
								],
								"description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate."
							}
						}
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"automountServiceAccountToken": {
						"type": "boolean",
						"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
					},
					"minReadySeconds": {
						"type": "integer",
						"description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
						"format": "int32"
					},
					"securityContext": {
						"additionalProperties": false,
						"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
						"properties": {
							"runAsNonRoot": {
								"type": "boolean",
								"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
							},
							"fsGroup": {
								"type": "integer",
								"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
								"format": "int64"
							},
							"seLinuxOptions": {
								"additionalProperties": false,
								"description": "SELinuxOptions are the labels to be applied to the container",
								"properties": {
									"type": {
										"type": [
											"string",
											"null"
										],
										"description": "Type is a SELinux type label that applies to the container."
									},
									"role": {
										"type": [
											"string",
											"null"
										],
										"description": "Role is a SELinux role label that applies to the container."
									},
									"user": {
										"type": [
											"string",
											"null"
										],
										"description": "User is a SELinux user label that applies to the container."
									},
									"level": {
										"type": [
											"string",
											"null"
										],
										"description": "Level is SELinux level label that applies to the container."
									}
								}
							},
							"supplementalGroups": {
								"items": {
									"type": "integer",
									"format": "int64"
								},
								"type": [
									"array",
									"null"
								],
								"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
							},
							"runAsUser": {
								"type": "integer",
								"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								"format": "int64"
							}
						}
					},
					"nodeName": {
						"type": [
							"string",
							"null"
						],
						"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
					},
					"hostAliases": {
						"items": {
							"additionalProperties": false,
							"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
							"properties": {
								"ip": {
									"type": [
										"string",
										"null"
									],
									"description": "IP address of the host file entry."
								},
								"hostnames": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Hostnames for the above IP address."
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "ip"
					},
					"hostname": {
						"type": [
							"string",
							"null"
						],
						"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
					},
					"serviceAccount": {
						"type": [
							"string",
							"null"
						],
						"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
					},
					"nodeSelector": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"affinity": {
						"additionalProperties": false,
						"description": "Affinity is a group of affinity scheduling rules.",
						"properties": {
							"podAffinity": {
								"additionalProperties": false,
								"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"nodeAffinity": {
								"additionalProperties": false,
								"description": "Node affinity is a group of node affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"additionalProperties": false,
										"required": [
											"nodeSelectorTerms"
										],
										"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
										"properties": {
											"nodeSelectorTerms": {
												"items": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"type": "array",
												"description": "Required. A list of node selector terms. The terms are ORed."
											}
										}
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"preference"
											],
											"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
											"properties": {
												"preference": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"podAntiAffinity": {
								"additionalProperties": false,
								"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							}
						}
					},
					"template": {
						"additionalProperties": false,
						"description": "PodTemplateSpec describes the data a pod should have when created from a template",
						"properties": {
							"spec": {
								"additionalProperties": false,
								"required": [
									"containers"
								],
								"description": "PodSpec is a description of a pod.",
								"properties": {
									"dnsPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
									},
									"hostNetwork": {
										"type": "boolean",
										"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
									},
									"restartPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
									},
									"automountServiceAccountToken": {
										"type": "boolean",
										"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
									},
									"securityContext": {
										"additionalProperties": false,
										"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
										"properties": {
											"runAsNonRoot": {
												"type": "boolean",
												"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
											},
											"fsGroup": {
												"type": "integer",
												"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
												"format": "int64"
											},
											"seLinuxOptions": {
												"additionalProperties": false,
												"description": "SELinuxOptions are the labels to be applied to the container",
												"properties": {
													"type": {
														"type": [
															"string",
															"null"
														],
														"description": "Type is a SELinux type label that applies to the container."
													},
													"role": {
														"type": [
															"string",
															"null"
														],
														"description": "Role is a SELinux role label that applies to the container."
													},
													"user": {
														"type": [
															"string",
															"null"
														],
														"description": "User is a SELinux user label that applies to the container."
													},
													"level": {
														"type": [
															"string",
															"null"
														],
														"description": "Level is SELinux level label that applies to the container."
													}
												}
											},
											"supplementalGroups": {
												"items": {
													"type": "integer",
													"format": "int64"
												},
												"type": [
													"array",
													"null"
												],
												"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
											},
											"runAsUser": {
												"type": "integer",
												"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
												"format": "int64"
											}
										}
									},
									"nodeName": {
										"type": [
											"string",
											"null"
										],
										"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
									},
									"hostAliases": {
										"items": {
											"additionalProperties": false,
											"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
											"properties": {
												"ip": {
													"type": [
														"string",
														"null"
													],
													"description": "IP address of the host file entry."
												},
												"hostnames": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Hostnames for the above IP address."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "ip"
									},
									"hostname": {
										"type": [
											"string",
											"null"
										],
										"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
									},
									"serviceAccount": {
										"type": [
											"string",
											"null"
										],
										"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
									},
									"nodeSelector": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
									},
									"affinity": {
										"additionalProperties": false,
										"description": "Affinity is a group of affinity scheduling rules.",
										"properties": {
											"podAffinity": {
												"additionalProperties": false,
												"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"additionalProperties": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "key is the label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"additionalProperties": {
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"x-kubernetes-patch-merge-key": "key",
																								"type": "string",
																								"description": "key is the label key that the selector applies to.",
																								"x-kubernetes-patch-strategy": "merge"
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"nodeAffinity": {
												"additionalProperties": false,
												"description": "Node affinity is a group of node affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"additionalProperties": false,
														"required": [
															"nodeSelectorTerms"
														],
														"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
														"properties": {
															"nodeSelectorTerms": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "The label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"type": "array",
																"description": "Required. A list of node selector terms. The terms are ORed."
															}
														}
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"preference"
															],
															"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
															"properties": {
																"preference": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "The label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"podAntiAffinity": {
												"additionalProperties": false,
												"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"additionalProperties": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "key is the label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"additionalProperties": {
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"x-kubernetes-patch-merge-key": "key",
																								"type": "string",
																								"description": "key is the label key that the selector applies to.",
																								"x-kubernetes-patch-strategy": "merge"
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											}
										}
									},
									"tolerations": {
										"items": {
											"additionalProperties": false,
											"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
											"properties": {
												"operator": {
													"type": [
														"string",
														"null"
													],
													"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
												},
												"tolerationSeconds": {
													"type": "integer",
													"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
													"format": "int64"
												},
												"effect": {
													"type": [
														"string",
														"null"
													],
													"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
												},
												"key": {
													"x-kubernetes-patch-merge-key": "key",
													"type": [
														"string",
														"null"
													],
													"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
													"x-kubernetes-patch-strategy": "merge"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "If specified, the pod's tolerations."
									},
									"subdomain": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
									},
									"containers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name",
												"image"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "mountPath"
												},
												"image": {
													"type": "string",
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "name"
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "containerPort"
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": "array",
										"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"serviceAccountName": {
										"type": [
											"string",
											"null"
										],
										"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
									},
									"schedulerName": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
									},
									"hostIPC": {
										"type": "boolean",
										"description": "Use the host's ipc namespace. Optional: Default to false."
									},
									"activeDeadlineSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
										"format": "int64"
									},
									"terminationGracePeriodSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
										"format": "int64"
									},
									"hostPID": {
										"type": "boolean",
										"description": "Use the host's pid namespace. Optional: Default to false."
									},
									"volumes": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
											"properties": {
												"portworxVolume": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "PortworxVolumeSource represents a Portworx volume resource.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeID": {
															"type": "string",
															"description": "VolumeID uniquely identifies a Portworx volume"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"glusterfs": {
													"additionalProperties": false,
													"required": [
														"endpoints",
														"path"
													],
													"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"endpoints": {
															"type": "string",
															"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														}
													}
												},
												"gitRepo": {
													"additionalProperties": false,
													"required": [
														"repository"
													],
													"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
													"properties": {
														"directory": {
															"type": [
																"string",
																"null"
															],
															"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
														},
														"repository": {
															"type": "string",
															"description": "Repository URL"
														},
														"revision": {
															"type": [
																"string",
																"null"
															],
															"description": "Commit hash for the specified revision."
														}
													}
												},
												"flocker": {
													"additionalProperties": false,
													"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"datasetName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
														},
														"datasetUUID": {
															"type": [
																"string",
																"null"
															],
															"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
														}
													}
												},
												"storageos": {
													"additionalProperties": false,
													"description": "Represents a StorageOS persistent volume resource.",
													"properties": {
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeNamespace": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"iscsi": {
													"additionalProperties": false,
													"required": [
														"targetPortal",
														"iqn",
														"lun"
													],
													"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
													"properties": {
														"targetPortal": {
															"type": "string",
															"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"portals": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
														},
														"chapAuthSession": {
															"type": "boolean",
															"description": "whether support iSCSI Session CHAP authentication"
														},
														"iscsiInterface": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
														},
														"chapAuthDiscovery": {
															"type": "boolean",
															"description": "whether support iSCSI Discovery CHAP authentication"
														},
														"iqn": {
															"type": "string",
															"description": "Target iSCSI Qualified Name."
														},
														"lun": {
															"type": "integer",
															"description": "iSCSI target lun number.",
															"format": "int32"
														}
													}
												},
												"projected": {
													"additionalProperties": false,
													"required": [
														"sources"
													],
													"description": "Represents a projected volume source",
													"properties": {
														"sources": {
															"items": {
																"additionalProperties": false,
																"description": "Projection that may be projected along with other supported volume types",
																"properties": {
																	"configMap": {
																		"additionalProperties": false,
																		"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's keys must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"secret": {
																		"additionalProperties": false,
																		"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or its key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"downwardAPI": {
																		"additionalProperties": false,
																		"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"path"
																					],
																					"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																						},
																						"fieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"fieldPath"
																							],
																							"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																							"properties": {
																								"fieldPath": {
																									"type": "string",
																									"description": "Path of the field to select in the specified API version."
																								},
																								"apiVersion": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																								}
																							}
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"resourceFieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"resource"
																							],
																							"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																							"properties": {
																								"containerName": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Container name: required for volumes, optional for env vars"
																								},
																								"resource": {
																									"type": "string",
																									"description": "Required: resource to select"
																								},
																								"divisor": {
																									"oneOf": [
																										{
																											"type": [
																												"string",
																												"null"
																											]
																										},
																										{
																											"type": "integer"
																										}
																									]
																								}
																							}
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "Items is a list of DownwardAPIVolume file"
																			}
																		}
																	}
																}
															},
															"type": "array",
															"description": "list of volume projections"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"secret": {
													"additionalProperties": false,
													"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the Secret or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"secretName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
														}
													}
												},
												"scaleIO": {
													"additionalProperties": false,
													"required": [
														"gateway",
														"system",
														"secretRef"
													],
													"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
													"properties": {
														"storageMode": {
															"type": [
																"string",
																"null"
															],
															"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"protectionDomain": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
														},
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
														},
														"sslEnabled": {
															"type": "boolean",
															"description": "Flag to enable/disable SSL communication with Gateway, default false"
														},
														"system": {
															"type": "string",
															"description": "The name of the storage system as configured in ScaleIO."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"storagePool": {
															"type": [
																"string",
																"null"
															],
															"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
														},
														"gateway": {
															"type": "string",
															"description": "The host address of the ScaleIO API Gateway."
														}
													}
												},
												"photonPersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdID"
													],
													"description": "Represents a Photon Controller persistent disk resource.",
													"properties": {
														"pdID": {
															"type": "string",
															"description": "ID that identifies Photon Controller persistent disk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"azureDisk": {
													"additionalProperties": false,
													"required": [
														"diskName",
														"diskURI"
													],
													"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
													"properties": {
														"diskName": {
															"type": "string",
															"description": "The Name of the data disk in the blob storage"
														},
														"cachingMode": {
															"type": [
																"string",
																"null"
															],
															"description": "Host Caching mode: None, Read Only, Read Write."
														},
														"kind": {
															"type": [
																"string",
																"null"
															],
															"description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"diskURI": {
															"type": "string",
															"description": "The URI the data disk in the blob storage"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														}
													}
												},
												"fc": {
													"additionalProperties": false,
													"required": [
														"targetWWNs",
														"lun"
													],
													"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"targetWWNs": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "Required: FC target worldwide names (WWNs)"
														},
														"lun": {
															"type": "integer",
															"description": "Required: FC target lun number",
															"format": "int32"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"flexVolume": {
													"additionalProperties": false,
													"required": [
														"driver"
													],
													"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"driver": {
															"type": "string",
															"description": "Driver is the name of the driver to use for this volume."
														},
														"options": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "Optional: Extra command options if any."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
														}
													}
												},
												"emptyDir": {
													"additionalProperties": false,
													"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
													"properties": {
														"sizeLimit": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														},
														"medium": {
															"type": [
																"string",
																"null"
															],
															"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
														}
													}
												},
												"persistentVolumeClaim": {
													"additionalProperties": false,
													"required": [
														"claimName"
													],
													"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
														},
														"claimName": {
															"type": "string",
															"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
														}
													}
												},
												"configMap": {
													"additionalProperties": false,
													"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the ConfigMap or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"name": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
														}
													}
												},
												"rbd": {
													"additionalProperties": false,
													"required": [
														"monitors",
														"image"
													],
													"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"image": {
															"type": "string",
															"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"keyring": {
															"type": [
																"string",
																"null"
															],
															"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"pool": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"azureFile": {
													"additionalProperties": false,
													"required": [
														"secretName",
														"shareName"
													],
													"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
													"properties": {
														"shareName": {
															"type": "string",
															"description": "Share Name"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"secretName": {
															"type": "string",
															"description": "the name of secret that contains Azure Storage Account Name and Key"
														}
													}
												},
												"quobyte": {
													"additionalProperties": false,
													"required": [
														"registry",
														"volume"
													],
													"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"volume": {
															"type": "string",
															"description": "Volume is a string that references an already created Quobyte volume by name."
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
														},
														"group": {
															"type": [
																"string",
																"null"
															],
															"description": "Group to map volume access to Default is no group"
														},
														"registry": {
															"type": "string",
															"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "User to map volume access to Defaults to serivceaccount user"
														}
													}
												},
												"hostPath": {
													"additionalProperties": false,
													"required": [
														"path"
													],
													"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
														}
													}
												},
												"nfs": {
													"additionalProperties": false,
													"required": [
														"server",
														"path"
													],
													"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"server": {
															"type": "string",
															"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														}
													}
												},
												"vsphereVolume": {
													"additionalProperties": false,
													"required": [
														"volumePath"
													],
													"description": "Represents a vSphere volume resource.",
													"properties": {
														"storagePolicyName": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile name."
														},
														"volumePath": {
															"type": "string",
															"description": "Path that identifies vSphere volume vmdk"
														},
														"storagePolicyID": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"cinder": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"volumeID": {
															"type": "string",
															"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														}
													}
												},
												"awsElasticBlockStore": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
															"format": "int32"
														},
														"volumeID": {
															"type": "string",
															"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														}
													}
												},
												"cephfs": {
													"additionalProperties": false,
													"required": [
														"monitors"
													],
													"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"secretFile": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														}
													}
												},
												"downwardAPI": {
													"additionalProperties": false,
													"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"path"
																],
																"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Items is a list of downward API volume file"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"gcePersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdName"
													],
													"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
															"format": "int32"
														},
														"pdName": {
															"type": "string",
															"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														}
													}
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"initContainers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name",
												"image"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "mountPath"
												},
												"image": {
													"type": "string",
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "name"
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "containerPort"
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"imagePullSecrets": {
										"items": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									}
								}
							},
							"metadata": {
								"additionalProperties": false,
								"description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
								"properties": {
									"uid": {
										"type": [
											"string",
											"null"
										],
										"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
									},
									"deletionTimestamp": {
										"type": [
											"string",
											"null"
										],
										"format": "date-time"
									},
									"clusterName": {
										"type": [
											"string",
											"null"
										],
										"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
									},
									"deletionGracePeriodSeconds": {
										"type": "integer",
										"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
										"format": "int64"
									},
									"labels": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
									},
									"namespace": {
										"type": [
											"string",
											"null"
										],
										"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
									},
									"generation": {
										"type": "integer",
										"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
										"format": "int64"
									},
									"finalizers": {
										"items": {
											"type": [
												"string",
												"null"
											]
										},
										"type": [
											"array",
											"null"
										],
										"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
										"x-kubernetes-patch-strategy": "merge"
									},
									"generateName": {
										"type": [
											"string",
											"null"
										],
										"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
									},
									"initializers": {
										"additionalProperties": false,
										"required": [
											"pending"
										],
										"description": "Initializers tracks the progress of initialization.",
										"properties": {
											"result": {
												"additionalProperties": false,
												"x-kubernetes-group-version-kind": [
													{
														"kind": "Status",
														"version": "v1",
														"group": ""
													}
												],
												"description": "Status is a return value for calls that don't return other objects.",
												"properties": {
													"status": {
														"type": [
															"string",
															"null"
														],
														"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
													},
													"kind": {
														"type": [
															"string",
															"null"
														],
														"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
													},
													"code": {
														"type": "integer",
														"description": "Suggested HTTP return code for this status, 0 if not set.",
														"format": "int32"
													},
													"apiVersion": {
														"type": [
															"string",
															"null"
														],
														"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
													},
													"reason": {
														"type": [
															"string",
															"null"
														],
														"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
													},
													"details": {
														"additionalProperties": false,
														"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
														"properties": {
															"kind": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
															},
															"group": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The group attribute of the resource associated with the status StatusReason."
															},
															"uid": {
																"type": [
																	"string",
																	"null"
																],
																"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
															},
															"retryAfterSeconds": {
																"type": "integer",
																"description": "If specified, the time in seconds before the operation should be retried.",
																"format": "int32"
															},
															"causes": {
																"items": {
																	"additionalProperties": false,
																	"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
																	"properties": {
																		"field": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
																		},
																		"message": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
																		},
																		"reason": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
															}
														}
													},
													"message": {
														"type": [
															"string",
															"null"
														],
														"description": "A human-readable description of the status of this operation."
													},
													"metadata": {
														"additionalProperties": false,
														"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
														"properties": {
															"selfLink": {
																"type": [
																	"string",
																	"null"
																],
																"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
															},
															"resourceVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
															}
														}
													}
												}
											},
											"pending": {
												"items": {
													"additionalProperties": false,
													"required": [
														"name"
													],
													"description": "Initializer is information about an initializer that has not yet completed.",
													"properties": {
														"name": {
															"type": "string",
															"description": "name of the process that is responsible for initializing this object."
														}
													}
												},
												"type": "array",
												"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
											}
										}
									},
									"resourceVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
									},
									"ownerReferences": {
										"items": {
											"additionalProperties": false,
											"required": [
												"apiVersion",
												"kind",
												"name",
												"uid"
											],
											"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
											"properties": {
												"kind": {
													"type": "string",
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"uid": {
													"type": "string",
													"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
												},
												"apiVersion": {
													"type": "string",
													"description": "API version of the referent."
												},
												"controller": {
													"type": "boolean",
													"description": "If true, this reference points to the managing controller."
												},
												"blockOwnerDeletion": {
													"type": "boolean",
													"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
												},
												"name": {
													"type": "string",
													"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "uid"
									},
									"creationTimestamp": {
										"type": [
											"string",
											"null"
										],
										"format": "date-time"
									},
									"annotations": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
									},
									"selfLink": {
										"type": [
											"string",
											"null"
										],
										"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
									},
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
									}
								}
							}
						}
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"tolerations": {
						"items": {
							"additionalProperties": false,
							"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
							"properties": {
								"operator": {
									"type": [
										"string",
										"null"
									],
									"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
								},
								"value": {
									"type": [
										"string",
										"null"
									],
									"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
								},
								"tolerationSeconds": {
									"type": "integer",
									"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
									"format": "int64"
								},
								"effect": {
									"type": [
										"string",
										"null"
									],
									"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
								},
								"key": {
									"x-kubernetes-patch-merge-key": "key",
									"type": [
										"string",
										"null"
									],
									"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
									"x-kubernetes-patch-strategy": "merge"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "If specified, the pod's tolerations."
					},
					"revisionHistoryLimit": {
						"type": "integer",
						"description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.",
						"format": "int32"
					},
					"subdomain": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"hostPID": {
						"type": "boolean",
						"description": "Use the host's pid namespace. Optional: Default to false."
					},
					"rollbackTo": {
						"additionalProperties": false,
						"properties": {
							"revision": {
								"type": "integer",
								"description": "The revision to rollback to. If set to 0, rollback to the last revision.",
								"format": "int64"
							}
						}
					},
					"hostNetwork": {
						"type": "boolean",
						"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
					},
					"serviceAccountName": {
						"type": [
							"string",
							"null"
						],
						"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
					},
					"replicas": {
						"type": "integer",
						"description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
						"format": "int32"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"selector": {
						"additionalProperties": false,
						"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
						"properties": {
							"matchLabels": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
							},
							"matchExpressions": {
								"items": {
									"additionalProperties": false,
									"required": [
										"key",
										"operator"
									],
									"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
									"properties": {
										"operator": {
											"type": "string",
											"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
										},
										"values": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
										},
										"key": {
											"x-kubernetes-patch-merge-key": "key",
											"type": "string",
											"description": "key is the label key that the selector applies to.",
											"x-kubernetes-patch-strategy": "merge"
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
							}
						}
					},
					"hostIPC": {
						"type": "boolean",
						"description": "Use the host's ipc namespace. Optional: Default to false."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"progressDeadlineSeconds": {
						"type": "integer",
						"description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
						"format": "int32"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"schedulerName": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"activeDeadlineSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
						"format": "int64"
					},
					"terminationGracePeriodSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
						"format": "int64"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"containers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": "array",
						"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
					},
					"volumes": {
						"items": {
							"additionalProperties": false,
							"required": [
								"name"
							],
							"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
							"properties": {
								"portworxVolume": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "PortworxVolumeSource represents a Portworx volume resource.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeID": {
											"type": "string",
											"description": "VolumeID uniquely identifies a Portworx volume"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"glusterfs": {
									"additionalProperties": false,
									"required": [
										"endpoints",
										"path"
									],
									"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"endpoints": {
											"type": "string",
											"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										}
									}
								},
								"gitRepo": {
									"additionalProperties": false,
									"required": [
										"repository"
									],
									"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
									"properties": {
										"directory": {
											"type": [
												"string",
												"null"
											],
											"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
										},
										"repository": {
											"type": "string",
											"description": "Repository URL"
										},
										"revision": {
											"type": [
												"string",
												"null"
											],
											"description": "Commit hash for the specified revision."
										}
									}
								},
								"flocker": {
									"additionalProperties": false,
									"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"datasetName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
										},
										"datasetUUID": {
											"type": [
												"string",
												"null"
											],
											"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
										}
									}
								},
								"storageos": {
									"additionalProperties": false,
									"description": "Represents a StorageOS persistent volume resource.",
									"properties": {
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeNamespace": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"iscsi": {
									"additionalProperties": false,
									"required": [
										"targetPortal",
										"iqn",
										"lun"
									],
									"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
									"properties": {
										"targetPortal": {
											"type": "string",
											"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"portals": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
										},
										"chapAuthSession": {
											"type": "boolean",
											"description": "whether support iSCSI Session CHAP authentication"
										},
										"iscsiInterface": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
										},
										"chapAuthDiscovery": {
											"type": "boolean",
											"description": "whether support iSCSI Discovery CHAP authentication"
										},
										"iqn": {
											"type": "string",
											"description": "Target iSCSI Qualified Name."
										},
										"lun": {
											"type": "integer",
											"description": "iSCSI target lun number.",
											"format": "int32"
										}
									}
								},
								"projected": {
									"additionalProperties": false,
									"required": [
										"sources"
									],
									"description": "Represents a projected volume source",
									"properties": {
										"sources": {
											"items": {
												"additionalProperties": false,
												"description": "Projection that may be projected along with other supported volume types",
												"properties": {
													"configMap": {
														"additionalProperties": false,
														"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's keys must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"secret": {
														"additionalProperties": false,
														"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or its key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"downwardAPI": {
														"additionalProperties": false,
														"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"path"
																	],
																	"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"oneOf": [
																						{
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						{
																							"type": "integer"
																						}
																					]
																				}
																			}
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "Items is a list of DownwardAPIVolume file"
															}
														}
													}
												}
											},
											"type": "array",
											"description": "list of volume projections"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"secret": {
									"additionalProperties": false,
									"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the Secret or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"secretName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
										}
									}
								},
								"scaleIO": {
									"additionalProperties": false,
									"required": [
										"gateway",
										"system",
										"secretRef"
									],
									"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
									"properties": {
										"storageMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"protectionDomain": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
										},
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
										},
										"sslEnabled": {
											"type": "boolean",
											"description": "Flag to enable/disable SSL communication with Gateway, default false"
										},
										"system": {
											"type": "string",
											"description": "The name of the storage system as configured in ScaleIO."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"storagePool": {
											"type": [
												"string",
												"null"
											],
											"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
										},
										"gateway": {
											"type": "string",
											"description": "The host address of the ScaleIO API Gateway."
										}
									}
								},
								"photonPersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdID"
									],
									"description": "Represents a Photon Controller persistent disk resource.",
									"properties": {
										"pdID": {
											"type": "string",
											"description": "ID that identifies Photon Controller persistent disk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"azureDisk": {
									"additionalProperties": false,
									"required": [
										"diskName",
										"diskURI"
									],
									"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
									"properties": {
										"diskName": {
											"type": "string",
											"description": "The Name of the data disk in the blob storage"
										},
										"cachingMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Host Caching mode: None, Read Only, Read Write."
										},
										"kind": {
											"type": [
												"string",
												"null"
											],
											"description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"diskURI": {
											"type": "string",
											"description": "The URI the data disk in the blob storage"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										}
									}
								},
								"fc": {
									"additionalProperties": false,
									"required": [
										"targetWWNs",
										"lun"
									],
									"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"targetWWNs": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: FC target worldwide names (WWNs)"
										},
										"lun": {
											"type": "integer",
											"description": "Required: FC target lun number",
											"format": "int32"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"flexVolume": {
									"additionalProperties": false,
									"required": [
										"driver"
									],
									"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"driver": {
											"type": "string",
											"description": "Driver is the name of the driver to use for this volume."
										},
										"options": {
											"additionalProperties": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "object",
											"description": "Optional: Extra command options if any."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
										}
									}
								},
								"emptyDir": {
									"additionalProperties": false,
									"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
									"properties": {
										"sizeLimit": {
											"oneOf": [
												{
													"type": [
														"string",
														"null"
													]
												},
												{
													"type": "integer"
												}
											]
										},
										"medium": {
											"type": [
												"string",
												"null"
											],
											"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
										}
									}
								},
								"persistentVolumeClaim": {
									"additionalProperties": false,
									"required": [
										"claimName"
									],
									"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
										},
										"claimName": {
											"type": "string",
											"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
										}
									}
								},
								"configMap": {
									"additionalProperties": false,
									"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the ConfigMap or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"name": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
										}
									}
								},
								"rbd": {
									"additionalProperties": false,
									"required": [
										"monitors",
										"image"
									],
									"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"image": {
											"type": "string",
											"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"keyring": {
											"type": [
												"string",
												"null"
											],
											"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"pool": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										}
									}
								},
								"name": {
									"type": "string",
									"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								},
								"azureFile": {
									"additionalProperties": false,
									"required": [
										"secretName",
										"shareName"
									],
									"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
									"properties": {
										"shareName": {
											"type": "string",
											"description": "Share Name"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"secretName": {
											"type": "string",
											"description": "the name of secret that contains Azure Storage Account Name and Key"
										}
									}
								},
								"quobyte": {
									"additionalProperties": false,
									"required": [
										"registry",
										"volume"
									],
									"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"volume": {
											"type": "string",
											"description": "Volume is a string that references an already created Quobyte volume by name."
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
										},
										"group": {
											"type": [
												"string",
												"null"
											],
											"description": "Group to map volume access to Default is no group"
										},
										"registry": {
											"type": "string",
											"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "User to map volume access to Defaults to serivceaccount user"
										}
									}
								},
								"hostPath": {
									"additionalProperties": false,
									"required": [
										"path"
									],
									"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
										}
									}
								},
								"nfs": {
									"additionalProperties": false,
									"required": [
										"server",
										"path"
									],
									"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"server": {
											"type": "string",
											"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										}
									}
								},
								"vsphereVolume": {
									"additionalProperties": false,
									"required": [
										"volumePath"
									],
									"description": "Represents a vSphere volume resource.",
									"properties": {
										"storagePolicyName": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile name."
										},
										"volumePath": {
											"type": "string",
											"description": "Path that identifies vSphere volume vmdk"
										},
										"storagePolicyID": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"cinder": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"volumeID": {
											"type": "string",
											"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										}
									}
								},
								"awsElasticBlockStore": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
											"format": "int32"
										},
										"volumeID": {
											"type": "string",
											"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										}
									}
								},
								"cephfs": {
									"additionalProperties": false,
									"required": [
										"monitors"
									],
									"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"secretFile": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"path": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										}
									}
								},
								"downwardAPI": {
									"additionalProperties": false,
									"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"path"
												],
												"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
												"properties": {
													"path": {
														"type": "string",
														"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "Items is a list of downward API volume file"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"gcePersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdName"
									],
									"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
											"format": "int32"
										},
										"pdName": {
											"type": "string",
											"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										}
									}
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"initContainers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers."
					},
					"imagePullSecrets": {
						"items": {
							"additionalProperties": false,
							"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
							"properties": {
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			]
		},
		"finalizers": {
			"items": {
				"type": [
					"string",
					"null"
				]
			},
			"type": [
				"array",
				"null"
			],
			"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
			"x-kubernetes-patch-strategy": "merge"
		},
		"resourceVersion": {
			"type": [
				"string",
				"null"
			],
			"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
		},
		"annotations": {
			"additionalProperties": {
				"type": [
					"string",
					"null"
				]
			},
			"type": "object",
			"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
		},
		"configMaps": {
			"items": {
				"additionalProperties": false,
				"description": "ConfigMapMod holds configuration data for pods to consume.",
				"properties": {
					"kind": {
						"type": [
							"string",
							"null"
						],
						"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"data": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'."
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"apiVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"metadata": {
						"additionalProperties": false,
						"description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
						"properties": {
							"uid": {
								"type": [
									"string",
									"null"
								],
								"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
							},
							"deletionTimestamp": {
								"type": [
									"string",
									"null"
								],
								"format": "date-time"
							},
							"clusterName": {
								"type": [
									"string",
									"null"
								],
								"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
							},
							"deletionGracePeriodSeconds": {
								"type": "integer",
								"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
								"format": "int64"
							},
							"labels": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
							},
							"namespace": {
								"type": [
									"string",
									"null"
								],
								"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
							},
							"generation": {
								"type": "integer",
								"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
								"format": "int64"
							},
							"finalizers": {
								"items": {
									"type": [
										"string",
										"null"
									]
								},
								"type": [
									"array",
									"null"
								],
								"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
								"x-kubernetes-patch-strategy": "merge"
							},
							"generateName": {
								"type": [
									"string",
									"null"
								],
								"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
							},
							"initializers": {
								"additionalProperties": false,
								"required": [
									"pending"
								],
								"description": "Initializers tracks the progress of initialization.",
								"properties": {
									"result": {
										"additionalProperties": false,
										"x-kubernetes-group-version-kind": [
											{
												"kind": "Status",
												"version": "v1",
												"group": ""
											}
										],
										"description": "Status is a return value for calls that don't return other objects.",
										"properties": {
											"status": {
												"type": [
													"string",
													"null"
												],
												"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
											},
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"code": {
												"type": "integer",
												"description": "Suggested HTTP return code for this status, 0 if not set.",
												"format": "int32"
											},
											"apiVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
											},
											"reason": {
												"type": [
													"string",
													"null"
												],
												"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
											},
											"details": {
												"additionalProperties": false,
												"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
												"properties": {
													"kind": {
														"type": [
															"string",
															"null"
														],
														"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
													},
													"group": {
														"type": [
															"string",
															"null"
														],
														"description": "The group attribute of the resource associated with the status StatusReason."
													},
													"uid": {
														"type": [
															"string",
															"null"
														],
														"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
													},
													"retryAfterSeconds": {
														"type": "integer",
														"description": "If specified, the time in seconds before the operation should be retried.",
														"format": "int32"
													},
													"causes": {
														"items": {
															"additionalProperties": false,
															"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
															"properties": {
																"field": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
																},
																"message": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
																},
																"reason": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
													}
												}
											},
											"message": {
												"type": [
													"string",
													"null"
												],
												"description": "A human-readable description of the status of this operation."
											},
											"metadata": {
												"additionalProperties": false,
												"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
												"properties": {
													"selfLink": {
														"type": [
															"string",
															"null"
														],
														"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
													},
													"resourceVersion": {
														"type": [
															"string",
															"null"
														],
														"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
													}
												}
											}
										}
									},
									"pending": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "Initializer is information about an initializer that has not yet completed.",
											"properties": {
												"name": {
													"type": "string",
													"description": "name of the process that is responsible for initializing this object."
												}
											}
										},
										"type": "array",
										"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
									}
								}
							},
							"resourceVersion": {
								"type": [
									"string",
									"null"
								],
								"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
							},
							"ownerReferences": {
								"items": {
									"additionalProperties": false,
									"required": [
										"apiVersion",
										"kind",
										"name",
										"uid"
									],
									"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
									"properties": {
										"kind": {
											"type": "string",
											"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
										},
										"uid": {
											"type": "string",
											"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
										},
										"apiVersion": {
											"type": "string",
											"description": "API version of the referent."
										},
										"controller": {
											"type": "boolean",
											"description": "If true, this reference points to the managing controller."
										},
										"blockOwnerDeletion": {
											"type": "boolean",
											"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
										},
										"name": {
											"type": "string",
											"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
								"x-kubernetes-patch-strategy": "merge",
								"x-kubernetes-patch-merge-key": "uid"
							},
							"creationTimestamp": {
								"type": [
									"string",
									"null"
								],
								"format": "date-time"
							},
							"annotations": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
							},
							"selfLink": {
								"type": [
									"string",
									"null"
								],
								"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
							},
							"name": {
								"type": [
									"string",
									"null"
								],
								"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
							}
						}
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of configMaps"
		},
		"jobs": {
			"items": {
				"additionalProperties": false,
				"required": [
					"containers"
				],
				"description": "JobSpecMod is Kedge's extension of Kubernetes JobSpec",
				"properties": {
					"dnsPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"completions": {
						"type": "integer",
						"description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
						"format": "int32"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"hostNetwork": {
						"type": "boolean",
						"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
					},
					"restartPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"automountServiceAccountToken": {
						"type": "boolean",
						"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
					},
					"securityContext": {
						"additionalProperties": false,
						"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
						"properties": {
							"runAsNonRoot": {
								"type": "boolean",
								"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
							},
							"fsGroup": {
								"type": "integer",
								"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
								"format": "int64"
							},
							"seLinuxOptions": {
								"additionalProperties": false,
								"description": "SELinuxOptions are the labels to be applied to the container",
								"properties": {
									"type": {
										"type": [
											"string",
											"null"
										],
										"description": "Type is a SELinux type label that applies to the container."
									},
									"role": {
										"type": [
											"string",
											"null"
										],
										"description": "Role is a SELinux role label that applies to the container."
									},
									"user": {
										"type": [
											"string",
											"null"
										],
										"description": "User is a SELinux user label that applies to the container."
									},
									"level": {
										"type": [
											"string",
											"null"
										],
										"description": "Level is SELinux level label that applies to the container."
									}
								}
							},
							"supplementalGroups": {
								"items": {
									"type": "integer",
									"format": "int64"
								},
								"type": [
									"array",
									"null"
								],
								"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
							},
							"runAsUser": {
								"type": "integer",
								"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								"format": "int64"
							}
						}
					},
					"nodeName": {
						"type": [
							"string",
							"null"
						],
						"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
					},
					"hostAliases": {
						"items": {
							"additionalProperties": false,
							"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
							"properties": {
								"ip": {
									"type": [
										"string",
										"null"
									],
									"description": "IP address of the host file entry."
								},
								"hostnames": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Hostnames for the above IP address."
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "ip"
					},
					"hostname": {
						"type": [
							"string",
							"null"
						],
						"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
					},
					"serviceAccount": {
						"type": [
							"string",
							"null"
						],
						"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
					},
					"nodeSelector": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"affinity": {
						"additionalProperties": false,
						"description": "Affinity is a group of affinity scheduling rules.",
						"properties": {
							"podAffinity": {
								"additionalProperties": false,
								"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"nodeAffinity": {
								"additionalProperties": false,
								"description": "Node affinity is a group of node affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"additionalProperties": false,
										"required": [
											"nodeSelectorTerms"
										],
										"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
										"properties": {
											"nodeSelectorTerms": {
												"items": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"type": "array",
												"description": "Required. A list of node selector terms. The terms are ORed."
											}
										}
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"preference"
											],
											"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
											"properties": {
												"preference": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"podAntiAffinity": {
								"additionalProperties": false,
								"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							}
						}
					},
					"template": {
						"additionalProperties": false,
						"description": "PodTemplateSpec describes the data a pod should have when created from a template",
						"properties": {
							"spec": {
								"additionalProperties": false,
								"required": [
									"containers"
								],
								"description": "PodSpec is a description of a pod.",
								"properties": {
									"dnsPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
									},
									"hostNetwork": {
										"type": "boolean",
										"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
									},
									"restartPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
									},
									"automountServiceAccountToken": {
										"type": "boolean",
										"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
									},
									"securityContext": {
										"additionalProperties": false,
										"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
										"properties": {
											"runAsNonRoot": {
												"type": "boolean",
												"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
											},
											"fsGroup": {
												"type": "integer",
												"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
												"format": "int64"
											},
											"seLinuxOptions": {
												"additionalProperties": false,
												"description": "SELinuxOptions are the labels to be applied to the container",
												"properties": {
													"type": {
														"type": [
															"string",
															"null"
														],
														"description": "Type is a SELinux type label that applies to the container."
													},
													"role": {
														"type": [
															"string",
															"null"
														],
														"description": "Role is a SELinux role label that applies to the container."
													},
													"user": {
														"type": [
															"string",
															"null"
														],
														"description": "User is a SELinux user label that applies to the container."
													},
													"level": {
														"type": [
															"string",
															"null"
														],
														"description": "Level is SELinux level label that applies to the container."
													}
												}
											},
											"supplementalGroups": {
												"items": {
													"type": "integer",
													"format": "int64"
												},
												"type": [
													"array",
													"null"
												],
												"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
											},
											"runAsUser": {
												"type": "integer",
												"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
												"format": "int64"
											}
										}
									},
									"nodeName": {
										"type": [
											"string",
											"null"
										],
										"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
									},
									"hostAliases": {
										"items": {
											"additionalProperties": false,
											"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
											"properties": {
												"ip": {
													"type": [
														"string",
														"null"
													],
													"description": "IP address of the host file entry."
												},
												"hostnames": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Hostnames for the above IP address."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "ip"
									},
									"hostname": {
										"type": [
											"string",
											"null"
										],
										"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
									},
									"serviceAccount": {
										"type": [
											"string",
											"null"
										],
										"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
									},
									"nodeSelector": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
									},
									"affinity": {
										"additionalProperties": false,
										"description": "Affinity is a group of affinity scheduling rules.",
										"properties": {
											"podAffinity": {
												"additionalProperties": false,
												"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"additionalProperties": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "key is the label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"additionalProperties": {
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"x-kubernetes-patch-merge-key": "key",
																								"type": "string",
																								"description": "key is the label key that the selector applies to.",
																								"x-kubernetes-patch-strategy": "merge"
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"nodeAffinity": {
												"additionalProperties": false,
												"description": "Node affinity is a group of node affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"additionalProperties": false,
														"required": [
															"nodeSelectorTerms"
														],
														"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
														"properties": {
															"nodeSelectorTerms": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "The label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"type": "array",
																"description": "Required. A list of node selector terms. The terms are ORed."
															}
														}
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"preference"
															],
															"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
															"properties": {
																"preference": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "The label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"podAntiAffinity": {
												"additionalProperties": false,
												"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"additionalProperties": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"x-kubernetes-patch-merge-key": "key",
																						"type": "string",
																						"description": "key is the label key that the selector applies to.",
																						"x-kubernetes-patch-strategy": "merge"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"additionalProperties": {
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"x-kubernetes-patch-merge-key": "key",
																								"type": "string",
																								"description": "key is the label key that the selector applies to.",
																								"x-kubernetes-patch-strategy": "merge"
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											}
										}
									},
									"tolerations": {
										"items": {
											"additionalProperties": false,
											"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
											"properties": {
												"operator": {
													"type": [
														"string",
														"null"
													],
													"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
												},
												"tolerationSeconds": {
													"type": "integer",
													"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
													"format": "int64"
												},
												"effect": {
													"type": [
														"string",
														"null"
													],
													"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
												},
												"key": {
													"x-kubernetes-patch-merge-key": "key",
													"type": [
														"string",
														"null"
													],
													"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
													"x-kubernetes-patch-strategy": "merge"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "If specified, the pod's tolerations."
									},
									"subdomain": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
									},
									"containers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name",
												"image"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "mountPath"
												},
												"image": {
													"type": "string",
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "name"
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "containerPort"
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": "array",
										"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"serviceAccountName": {
										"type": [
											"string",
											"null"
										],
										"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
									},
									"schedulerName": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
									},
									"hostIPC": {
										"type": "boolean",
										"description": "Use the host's ipc namespace. Optional: Default to false."
									},
									"activeDeadlineSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
										"format": "int64"
									},
									"terminationGracePeriodSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
										"format": "int64"
									},
									"hostPID": {
										"type": "boolean",
										"description": "Use the host's pid namespace. Optional: Default to false."
									},
									"volumes": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
											"properties": {
												"portworxVolume": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "PortworxVolumeSource represents a Portworx volume resource.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeID": {
															"type": "string",
															"description": "VolumeID uniquely identifies a Portworx volume"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"glusterfs": {
													"additionalProperties": false,
													"required": [
														"endpoints",
														"path"
													],
													"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"endpoints": {
															"type": "string",
															"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														}
													}
												},
												"gitRepo": {
													"additionalProperties": false,
													"required": [
														"repository"
													],
													"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
													"properties": {
														"directory": {
															"type": [
																"string",
																"null"
															],
															"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
														},
														"repository": {
															"type": "string",
															"description": "Repository URL"
														},
														"revision": {
															"type": [
																"string",
																"null"
															],
															"description": "Commit hash for the specified revision."
														}
													}
												},
												"flocker": {
													"additionalProperties": false,
													"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"datasetName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
														},
														"datasetUUID": {
															"type": [
																"string",
																"null"
															],
															"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
														}
													}
												},
												"storageos": {
													"additionalProperties": false,
													"description": "Represents a StorageOS persistent volume resource.",
													"properties": {
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeNamespace": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"iscsi": {
													"additionalProperties": false,
													"required": [
														"targetPortal",
														"iqn",
														"lun"
													],
													"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
													"properties": {
														"targetPortal": {
															"type": "string",
															"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"portals": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
														},
														"chapAuthSession": {
															"type": "boolean",
															"description": "whether support iSCSI Session CHAP authentication"
														},
														"iscsiInterface": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
														},
														"chapAuthDiscovery": {
															"type": "boolean",
															"description": "whether support iSCSI Discovery CHAP authentication"
														},
														"iqn": {
															"type": "string",
															"description": "Target iSCSI Qualified Name."
														},
														"lun": {
															"type": "integer",
															"description": "iSCSI target lun number.",
															"format": "int32"
														}
													}
												},
												"projected": {
													"additionalProperties": false,
													"required": [
														"sources"
													],
													"description": "Represents a projected volume source",
													"properties": {
														"sources": {
															"items": {
																"additionalProperties": false,
																"description": "Projection that may be projected along with other supported volume types",
																"properties": {
																	"configMap": {
																		"additionalProperties": false,
																		"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's keys must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"secret": {
																		"additionalProperties": false,
																		"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or its key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"downwardAPI": {
																		"additionalProperties": false,
																		"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"path"
																					],
																					"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																						},
																						"fieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"fieldPath"
																							],
																							"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																							"properties": {
																								"fieldPath": {
																									"type": "string",
																									"description": "Path of the field to select in the specified API version."
																								},
																								"apiVersion": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																								}
																							}
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"resourceFieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"resource"
																							],
																							"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																							"properties": {
																								"containerName": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Container name: required for volumes, optional for env vars"
																								},
																								"resource": {
																									"type": "string",
																									"description": "Required: resource to select"
																								},
																								"divisor": {
																									"oneOf": [
																										{
																											"type": [
																												"string",
																												"null"
																											]
																										},
																										{
																											"type": "integer"
																										}
																									]
																								}
																							}
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "Items is a list of DownwardAPIVolume file"
																			}
																		}
																	}
																}
															},
															"type": "array",
															"description": "list of volume projections"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"secret": {
													"additionalProperties": false,
													"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the Secret or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"secretName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
														}
													}
												},
												"scaleIO": {
													"additionalProperties": false,
													"required": [
														"gateway",
														"system",
														"secretRef"
													],
													"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
													"properties": {
														"storageMode": {
															"type": [
																"string",
																"null"
															],
															"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"protectionDomain": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
														},
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
														},
														"sslEnabled": {
															"type": "boolean",
															"description": "Flag to enable/disable SSL communication with Gateway, default false"
														},
														"system": {
															"type": "string",
															"description": "The name of the storage system as configured in ScaleIO."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"storagePool": {
															"type": [
																"string",
																"null"
															],
															"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
														},
														"gateway": {
															"type": "string",
															"description": "The host address of the ScaleIO API Gateway."
														}
													}
												},
												"photonPersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdID"
													],
													"description": "Represents a Photon Controller persistent disk resource.",
													"properties": {
														"pdID": {
															"type": "string",
															"description": "ID that identifies Photon Controller persistent disk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"azureDisk": {
													"additionalProperties": false,
													"required": [
														"diskName",
														"diskURI"
													],
													"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
													"properties": {
														"diskName": {
															"type": "string",
															"description": "The Name of the data disk in the blob storage"
														},
														"cachingMode": {
															"type": [
																"string",
																"null"
															],
															"description": "Host Caching mode: None, Read Only, Read Write."
														},
														"kind": {
															"type": [
																"string",
																"null"
															],
															"description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"diskURI": {
															"type": "string",
															"description": "The URI the data disk in the blob storage"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														}
													}
												},
												"fc": {
													"additionalProperties": false,
													"required": [
														"targetWWNs",
														"lun"
													],
													"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"targetWWNs": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "Required: FC target worldwide names (WWNs)"
														},
														"lun": {
															"type": "integer",
															"description": "Required: FC target lun number",
															"format": "int32"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"flexVolume": {
													"additionalProperties": false,
													"required": [
														"driver"
													],
													"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"driver": {
															"type": "string",
															"description": "Driver is the name of the driver to use for this volume."
														},
														"options": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "Optional: Extra command options if any."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
														}
													}
												},
												"emptyDir": {
													"additionalProperties": false,
													"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
													"properties": {
														"sizeLimit": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														},
														"medium": {
															"type": [
																"string",
																"null"
															],
															"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
														}
													}
												},
												"persistentVolumeClaim": {
													"additionalProperties": false,
													"required": [
														"claimName"
													],
													"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
														},
														"claimName": {
															"type": "string",
															"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
														}
													}
												},
												"configMap": {
													"additionalProperties": false,
													"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the ConfigMap or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"name": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
														}
													}
												},
												"rbd": {
													"additionalProperties": false,
													"required": [
														"monitors",
														"image"
													],
													"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"image": {
															"type": "string",
															"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"keyring": {
															"type": [
																"string",
																"null"
															],
															"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"pool": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"azureFile": {
													"additionalProperties": false,
													"required": [
														"secretName",
														"shareName"
													],
													"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
													"properties": {
														"shareName": {
															"type": "string",
															"description": "Share Name"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"secretName": {
															"type": "string",
															"description": "the name of secret that contains Azure Storage Account Name and Key"
														}
													}
												},
												"quobyte": {
													"additionalProperties": false,
													"required": [
														"registry",
														"volume"
													],
													"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"volume": {
															"type": "string",
															"description": "Volume is a string that references an already created Quobyte volume by name."
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
														},
														"group": {
															"type": [
																"string",
																"null"
															],
															"description": "Group to map volume access to Default is no group"
														},
														"registry": {
															"type": "string",
															"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "User to map volume access to Defaults to serivceaccount user"
														}
													}
												},
												"hostPath": {
													"additionalProperties": false,
													"required": [
														"path"
													],
													"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
														}
													}
												},
												"nfs": {
													"additionalProperties": false,
													"required": [
														"server",
														"path"
													],
													"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"server": {
															"type": "string",
															"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														}
													}
												},
												"vsphereVolume": {
													"additionalProperties": false,
													"required": [
														"volumePath"
													],
													"description": "Represents a vSphere volume resource.",
													"properties": {
														"storagePolicyName": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile name."
														},
														"volumePath": {
															"type": "string",
															"description": "Path that identifies vSphere volume vmdk"
														},
														"storagePolicyID": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"cinder": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"volumeID": {
															"type": "string",
															"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														}
													}
												},
												"awsElasticBlockStore": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
															"format": "int32"
														},
														"volumeID": {
															"type": "string",
															"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														}
													}
												},
												"cephfs": {
													"additionalProperties": false,
													"required": [
														"monitors"
													],
													"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"secretFile": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														}
													}
												},
												"downwardAPI": {
													"additionalProperties": false,
													"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"path"
																],
																"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Items is a list of downward API volume file"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"gcePersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdName"
													],
													"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
															"format": "int32"
														},
														"pdName": {
															"type": "string",
															"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														}
													}
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"initContainers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name",
												"image"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "mountPath"
												},
												"image": {
													"type": "string",
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"oneOf": [
																					{
																						"type": [
																							"string",
																							"null"
																						]
																					},
																					{
																						"type": "integer"
																					}
																				]
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "name"
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"oneOf": [
																		{
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		{
																			"type": "integer"
																		}
																	]
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"oneOf": [
																				{
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				{
																					"type": "integer"
																				}
																			]
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
													"x-kubernetes-patch-strategy": "merge",
													"x-kubernetes-patch-merge-key": "containerPort"
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"additionalProperties": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															},
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									},
									"imagePullSecrets": {
										"items": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "name"
									}
								}
							},
							"metadata": {
								"additionalProperties": false,
								"description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
								"properties": {
									"uid": {
										"type": [
											"string",
											"null"
										],
										"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
									},
									"deletionTimestamp": {
										"type": [
											"string",
											"null"
										],
										"format": "date-time"
									},
									"clusterName": {
										"type": [
											"string",
											"null"
										],
										"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
									},
									"deletionGracePeriodSeconds": {
										"type": "integer",
										"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
										"format": "int64"
									},
									"labels": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
									},
									"namespace": {
										"type": [
											"string",
											"null"
										],
										"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
									},
									"generation": {
										"type": "integer",
										"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
										"format": "int64"
									},
									"finalizers": {
										"items": {
											"type": [
												"string",
												"null"
											]
										},
										"type": [
											"array",
											"null"
										],
										"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
										"x-kubernetes-patch-strategy": "merge"
									},
									"generateName": {
										"type": [
											"string",
											"null"
										],
										"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
									},
									"initializers": {
										"additionalProperties": false,
										"required": [
											"pending"
										],
										"description": "Initializers tracks the progress of initialization.",
										"properties": {
											"result": {
												"additionalProperties": false,
												"x-kubernetes-group-version-kind": [
													{
														"kind": "Status",
														"version": "v1",
														"group": ""
													}
												],
												"description": "Status is a return value for calls that don't return other objects.",
												"properties": {
													"status": {
														"type": [
															"string",
															"null"
														],
														"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
													},
													"kind": {
														"type": [
															"string",
															"null"
														],
														"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
													},
													"code": {
														"type": "integer",
														"description": "Suggested HTTP return code for this status, 0 if not set.",
														"format": "int32"
													},
													"apiVersion": {
														"type": [
															"string",
															"null"
														],
														"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
													},
													"reason": {
														"type": [
															"string",
															"null"
														],
														"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
													},
													"details": {
														"additionalProperties": false,
														"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
														"properties": {
															"kind": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
															},
															"group": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The group attribute of the resource associated with the status StatusReason."
															},
															"uid": {
																"type": [
																	"string",
																	"null"
																],
																"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
															},
															"retryAfterSeconds": {
																"type": "integer",
																"description": "If specified, the time in seconds before the operation should be retried.",
																"format": "int32"
															},
															"causes": {
																"items": {
																	"additionalProperties": false,
																	"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
																	"properties": {
																		"field": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
																		},
																		"message": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
																		},
																		"reason": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
															}
														}
													},
													"message": {
														"type": [
															"string",
															"null"
														],
														"description": "A human-readable description of the status of this operation."
													},
													"metadata": {
														"additionalProperties": false,
														"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
														"properties": {
															"selfLink": {
																"type": [
																	"string",
																	"null"
																],
																"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
															},
															"resourceVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
															}
														}
													}
												}
											},
											"pending": {
												"items": {
													"additionalProperties": false,
													"required": [
														"name"
													],
													"description": "Initializer is information about an initializer that has not yet completed.",
													"properties": {
														"name": {
															"type": "string",
															"description": "name of the process that is responsible for initializing this object."
														}
													}
												},
												"type": "array",
												"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
											}
										}
									},
									"resourceVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
									},
									"ownerReferences": {
										"items": {
											"additionalProperties": false,
											"required": [
												"apiVersion",
												"kind",
												"name",
												"uid"
											],
											"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
											"properties": {
												"kind": {
													"type": "string",
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"uid": {
													"type": "string",
													"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
												},
												"apiVersion": {
													"type": "string",
													"description": "API version of the referent."
												},
												"controller": {
													"type": "boolean",
													"description": "If true, this reference points to the managing controller."
												},
												"blockOwnerDeletion": {
													"type": "boolean",
													"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
												},
												"name": {
													"type": "string",
													"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
										"x-kubernetes-patch-strategy": "merge",
										"x-kubernetes-patch-merge-key": "uid"
									},
									"creationTimestamp": {
										"type": [
											"string",
											"null"
										],
										"format": "date-time"
									},
									"annotations": {
										"additionalProperties": {
											"type": [
												"string",
												"null"
											]
										},
										"type": "object",
										"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
									},
									"selfLink": {
										"type": [
											"string",
											"null"
										],
										"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
									},
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
									}
								}
							}
						}
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"tolerations": {
						"items": {
							"additionalProperties": false,
							"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
							"properties": {
								"operator": {
									"type": [
										"string",
										"null"
									],
									"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
								},
								"value": {
									"type": [
										"string",
										"null"
									],
									"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
								},
								"tolerationSeconds": {
									"type": "integer",
									"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
									"format": "int64"
								},
								"effect": {
									"type": [
										"string",
										"null"
									],
									"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
								},
								"key": {
									"x-kubernetes-patch-merge-key": "key",
									"type": [
										"string",
										"null"
									],
									"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
									"x-kubernetes-patch-strategy": "merge"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "If specified, the pod's tolerations."
					},
					"subdomain": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"hostPID": {
						"type": "boolean",
						"description": "Use the host's pid namespace. Optional: Default to false."
					},
					"parallelism": {
						"type": "integer",
						"description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
						"format": "int32"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"serviceAccountName": {
						"type": [
							"string",
							"null"
						],
						"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
					},
					"manualSelector": {
						"type": "boolean",
						"description": "manualSelector controls generation of pod labels and pod selectors. Leave manualSelector unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see manualSelector=true in jobs that were created with the old extensions/v1beta1 API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"selector": {
						"additionalProperties": false,
						"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
						"properties": {
							"matchLabels": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
							},
							"matchExpressions": {
								"items": {
									"additionalProperties": false,
									"required": [
										"key",
										"operator"
									],
									"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
									"properties": {
										"operator": {
											"type": "string",
											"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
										},
										"values": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
										},
										"key": {
											"x-kubernetes-patch-merge-key": "key",
											"type": "string",
											"description": "key is the label key that the selector applies to.",
											"x-kubernetes-patch-strategy": "merge"
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
							}
						}
					},
					"hostIPC": {
						"type": "boolean",
						"description": "Use the host's ipc namespace. Optional: Default to false."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"schedulerName": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"activeDeadlineSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer This only sets ActiveDeadlineSeconds in JobSpec, not PodSpec",
						"format": "int64"
					},
					"terminationGracePeriodSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
						"format": "int64"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"containers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": "array",
						"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
					},
					"volumes": {
						"items": {
							"additionalProperties": false,
							"required": [
								"name"
							],
							"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
							"properties": {
								"portworxVolume": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "PortworxVolumeSource represents a Portworx volume resource.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeID": {
											"type": "string",
											"description": "VolumeID uniquely identifies a Portworx volume"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"glusterfs": {
									"additionalProperties": false,
									"required": [
										"endpoints",
										"path"
									],
									"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"endpoints": {
											"type": "string",
											"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										}
									}
								},
								"gitRepo": {
									"additionalProperties": false,
									"required": [
										"repository"
									],
									"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
									"properties": {
										"directory": {
											"type": [
												"string",
												"null"
											],
											"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
										},
										"repository": {
											"type": "string",
											"description": "Repository URL"
										},
										"revision": {
											"type": [
												"string",
												"null"
											],
											"description": "Commit hash for the specified revision."
										}
									}
								},
								"flocker": {
									"additionalProperties": false,
									"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"datasetName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
										},
										"datasetUUID": {
											"type": [
												"string",
												"null"
											],
											"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
										}
									}
								},
								"storageos": {
									"additionalProperties": false,
									"description": "Represents a StorageOS persistent volume resource.",
									"properties": {
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeNamespace": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"iscsi": {
									"additionalProperties": false,
									"required": [
										"targetPortal",
										"iqn",
										"lun"
									],
									"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
									"properties": {
										"targetPortal": {
											"type": "string",
											"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"portals": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
										},
										"chapAuthSession": {
											"type": "boolean",
											"description": "whether support iSCSI Session CHAP authentication"
										},
										"iscsiInterface": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
										},
										"chapAuthDiscovery": {
											"type": "boolean",
											"description": "whether support iSCSI Discovery CHAP authentication"
										},
										"iqn": {
											"type": "string",
											"description": "Target iSCSI Qualified Name."
										},
										"lun": {
											"type": "integer",
											"description": "iSCSI target lun number.",
											"format": "int32"
										}
									}
								},
								"projected": {
									"additionalProperties": false,
									"required": [
										"sources"
									],
									"description": "Represents a projected volume source",
									"properties": {
										"sources": {
											"items": {
												"additionalProperties": false,
												"description": "Projection that may be projected along with other supported volume types",
												"properties": {
													"configMap": {
														"additionalProperties": false,
														"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's keys must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"secret": {
														"additionalProperties": false,
														"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or its key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"downwardAPI": {
														"additionalProperties": false,
														"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"path"
																	],
																	"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"oneOf": [
																						{
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						{
																							"type": "integer"
																						}
																					]
																				}
																			}
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "Items is a list of DownwardAPIVolume file"
															}
														}
													}
												}
											},
											"type": "array",
											"description": "list of volume projections"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"secret": {
									"additionalProperties": false,
									"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the Secret or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"secretName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
										}
									}
								},
								"scaleIO": {
									"additionalProperties": false,
									"required": [
										"gateway",
										"system",
										"secretRef"
									],
									"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
									"properties": {
										"storageMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"protectionDomain": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
										},
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
										},
										"sslEnabled": {
											"type": "boolean",
											"description": "Flag to enable/disable SSL communication with Gateway, default false"
										},
										"system": {
											"type": "string",
											"description": "The name of the storage system as configured in ScaleIO."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"storagePool": {
											"type": [
												"string",
												"null"
											],
											"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
										},
										"gateway": {
											"type": "string",
											"description": "The host address of the ScaleIO API Gateway."
										}
									}
								},
								"photonPersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdID"
									],
									"description": "Represents a Photon Controller persistent disk resource.",
									"properties": {
										"pdID": {
											"type": "string",
											"description": "ID that identifies Photon Controller persistent disk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"azureDisk": {
									"additionalProperties": false,
									"required": [
										"diskName",
										"diskURI"
									],
									"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
									"properties": {
										"diskName": {
											"type": "string",
											"description": "The Name of the data disk in the blob storage"
										},
										"cachingMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Host Caching mode: None, Read Only, Read Write."
										},
										"kind": {
											"type": [
												"string",
												"null"
											],
											"description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"diskURI": {
											"type": "string",
											"description": "The URI the data disk in the blob storage"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										}
									}
								},
								"fc": {
									"additionalProperties": false,
									"required": [
										"targetWWNs",
										"lun"
									],
									"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"targetWWNs": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: FC target worldwide names (WWNs)"
										},
										"lun": {
											"type": "integer",
											"description": "Required: FC target lun number",
											"format": "int32"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"flexVolume": {
									"additionalProperties": false,
									"required": [
										"driver"
									],
									"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"driver": {
											"type": "string",
											"description": "Driver is the name of the driver to use for this volume."
										},
										"options": {
											"additionalProperties": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "object",
											"description": "Optional: Extra command options if any."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
										}
									}
								},
								"emptyDir": {
									"additionalProperties": false,
									"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
									"properties": {
										"sizeLimit": {
											"oneOf": [
												{
													"type": [
														"string",
														"null"
													]
												},
												{
													"type": "integer"
												}
											]
										},
										"medium": {
											"type": [
												"string",
												"null"
											],
											"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
										}
									}
								},
								"persistentVolumeClaim": {
									"additionalProperties": false,
									"required": [
										"claimName"
									],
									"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
										},
										"claimName": {
											"type": "string",
											"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
										}
									}
								},
								"configMap": {
									"additionalProperties": false,
									"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the ConfigMap or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"name": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
										}
									}
								},
								"rbd": {
									"additionalProperties": false,
									"required": [
										"monitors",
										"image"
									],
									"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"image": {
											"type": "string",
											"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"keyring": {
											"type": [
												"string",
												"null"
											],
											"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"pool": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										}
									}
								},
								"name": {
									"type": "string",
									"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								},
								"azureFile": {
									"additionalProperties": false,
									"required": [
										"secretName",
										"shareName"
									],
									"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
									"properties": {
										"shareName": {
											"type": "string",
											"description": "Share Name"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"secretName": {
											"type": "string",
											"description": "the name of secret that contains Azure Storage Account Name and Key"
										}
									}
								},
								"quobyte": {
									"additionalProperties": false,
									"required": [
										"registry",
										"volume"
									],
									"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"volume": {
											"type": "string",
											"description": "Volume is a string that references an already created Quobyte volume by name."
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
										},
										"group": {
											"type": [
												"string",
												"null"
											],
											"description": "Group to map volume access to Default is no group"
										},
										"registry": {
											"type": "string",
											"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "User to map volume access to Defaults to serivceaccount user"
										}
									}
								},
								"hostPath": {
									"additionalProperties": false,
									"required": [
										"path"
									],
									"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
										}
									}
								},
								"nfs": {
									"additionalProperties": false,
									"required": [
										"server",
										"path"
									],
									"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"server": {
											"type": "string",
											"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										}
									}
								},
								"vsphereVolume": {
									"additionalProperties": false,
									"required": [
										"volumePath"
									],
									"description": "Represents a vSphere volume resource.",
									"properties": {
										"storagePolicyName": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile name."
										},
										"volumePath": {
											"type": "string",
											"description": "Path that identifies vSphere volume vmdk"
										},
										"storagePolicyID": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"cinder": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"volumeID": {
											"type": "string",
											"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										}
									}
								},
								"awsElasticBlockStore": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
											"format": "int32"
										},
										"volumeID": {
											"type": "string",
											"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										}
									}
								},
								"cephfs": {
									"additionalProperties": false,
									"required": [
										"monitors"
									],
									"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"secretFile": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"path": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										}
									}
								},
								"downwardAPI": {
									"additionalProperties": false,
									"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"path"
												],
												"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
												"properties": {
													"path": {
														"type": "string",
														"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "Items is a list of downward API volume file"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"gcePersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdName"
									],
									"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
											"format": "int32"
										},
										"pdName": {
											"type": "string",
											"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										}
									}
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"initContainers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers."
					},
					"imagePullSecrets": {
						"items": {
							"additionalProperties": false,
							"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
							"properties": {
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			]
		},
		"clusterName": {
			"type": [
				"string",
				"null"
			],
			"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
		},
		"appversion": {
			"type": [
				"string",
				"null"
			],
			"description": "Field to specify the version of application"
		},
		"deploymentConfigs": {
			"items": {
				"additionalProperties": false,
				"required": [
					"containers"
				],
				"description": "Ochestrator: OpenShift DeploymentConfigSpecMod is Kedge's extension of OpenShift DeploymentConfig",
				"properties": {
					"dnsPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"paused": {
						"type": "boolean",
						"description": "Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers."
					},
					"restartPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"strategy": {
						"additionalProperties": false,
						"description": "DeploymentStrategy describes how to perform a deployment.",
						"properties": {
							"customParams": {
								"additionalProperties": false,
								"description": "CustomDeploymentStrategyParams are the input to the Custom deployment strategy.",
								"properties": {
									"environment": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "Environment holds the environment which will be given to the container for Image."
									},
									"image": {
										"type": [
											"string",
											"null"
										],
										"description": "Image specifies a Docker image which can carry out a deployment."
									},
									"command": {
										"items": {
											"type": [
												"string",
												"null"
											]
										},
										"type": [
											"array",
											"null"
										],
										"description": "Command is optional and overrides CMD in the container Image."
									}
								}
							},
							"labels": {
								"type": "object",
								"description": "Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods."
							},
							"activeDeadlineSeconds": {
								"type": "integer",
								"description": "ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.",
								"format": "int64"
							},
							"rollingParams": {
								"additionalProperties": false,
								"description": "RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.",
								"properties": {
									"pre": {
										"additionalProperties": false,
										"required": [
											"failurePolicy"
										],
										"description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
										"properties": {
											"failurePolicy": {
												"type": "string",
												"description": "FailurePolicy specifies what action to take if the hook fails."
											},
											"execNewPod": {
												"additionalProperties": false,
												"required": [
													"command",
													"containerName"
												],
												"description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
												"properties": {
													"containerName": {
														"type": "string",
														"description": "ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container."
													},
													"command": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": "array",
														"description": "Command is the action command and its arguments."
													},
													"volumes": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": [
															"array",
															"null"
														],
														"description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied."
													},
													"env": {
														"items": {
															"additionalProperties": false,
															"required": [
																"name"
															],
															"description": "EnvVar represents an environment variable present in a Container.",
															"properties": {
																"valueFrom": {
																	"additionalProperties": false,
																	"description": "EnvVarSource represents a source for the value of an EnvVar.",
																	"properties": {
																		"secretKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "SecretKeySelector selects a key of a Secret.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the Secret or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key of the secret to select from.  Must be a valid secret key."
																				}
																			}
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																				}
																			}
																		},
																		"configMapKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "Selects a key from a ConfigMap.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the ConfigMap or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key to select."
																				}
																			}
																		}
																	}
																},
																"name": {
																	"type": "string",
																	"description": "Name of the environment variable. Must be a C_IDENTIFIER."
																},
																"value": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "Env is a set of environment variables to supply to the hook pod's container."
													}
												}
											},
											"tagImages": {
												"items": {
													"additionalProperties": false,
													"required": [
														"containerName",
														"to"
													],
													"description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
													"properties": {
														"containerName": {
															"type": "string",
															"description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container."
														},
														"to": {
															"additionalProperties": false,
															"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
															"properties": {
																"kind": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"namespace": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "API version of the referent."
																},
																"fieldPath": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
																},
																"resourceVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
																},
																"uid": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
																}
															}
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag."
											}
										}
									},
									"timeoutSeconds": {
										"type": "integer",
										"description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
										"format": "int64"
									},
									"maxSurge": {
										"type": [
											"string",
											"null"
										],
										"description": "MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.\n\nThis cannot be 0 if MaxUnavailable is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods."
									},
									"intervalSeconds": {
										"type": "integer",
										"description": "IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.",
										"format": "int64"
									},
									"maxUnavailable": {
										"type": [
											"string",
											"null"
										],
										"description": "MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.\n\nThis cannot be 0 if MaxSurge is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update."
									},
									"updatePeriodSeconds": {
										"type": "integer",
										"description": "UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.",
										"format": "int64"
									},
									"post": {
										"additionalProperties": false,
										"required": [
											"failurePolicy"
										],
										"description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
										"properties": {
											"failurePolicy": {
												"type": "string",
												"description": "FailurePolicy specifies what action to take if the hook fails."
											},
											"execNewPod": {
												"additionalProperties": false,
												"required": [
													"command",
													"containerName"
												],
												"description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
												"properties": {
													"containerName": {
														"type": "string",
														"description": "ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container."
													},
													"command": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": "array",
														"description": "Command is the action command and its arguments."
													},
													"volumes": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": [
															"array",
															"null"
														],
														"description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied."
													},
													"env": {
														"items": {
															"additionalProperties": false,
															"required": [
																"name"
															],
															"description": "EnvVar represents an environment variable present in a Container.",
															"properties": {
																"valueFrom": {
																	"additionalProperties": false,
																	"description": "EnvVarSource represents a source for the value of an EnvVar.",
																	"properties": {
																		"secretKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "SecretKeySelector selects a key of a Secret.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the Secret or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key of the secret to select from.  Must be a valid secret key."
																				}
																			}
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																				}
																			}
																		},
																		"configMapKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "Selects a key from a ConfigMap.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the ConfigMap or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key to select."
																				}
																			}
																		}
																	}
																},
																"name": {
																	"type": "string",
																	"description": "Name of the environment variable. Must be a C_IDENTIFIER."
																},
																"value": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "Env is a set of environment variables to supply to the hook pod's container."
													}
												}
											},
											"tagImages": {
												"items": {
													"additionalProperties": false,
													"required": [
														"containerName",
														"to"
													],
													"description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
													"properties": {
														"containerName": {
															"type": "string",
															"description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container."
														},
														"to": {
															"additionalProperties": false,
															"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
															"properties": {
																"kind": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"namespace": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "API version of the referent."
																},
																"fieldPath": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
																},
																"resourceVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
																},
																"uid": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
																}
															}
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag."
											}
										}
									}
								}
							},
							"recreateParams": {
								"additionalProperties": false,
								"description": "RecreateDeploymentStrategyParams are the input to the Recreate deployment strategy.",
								"properties": {
									"pre": {
										"additionalProperties": false,
										"required": [
											"failurePolicy"
										],
										"description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
										"properties": {
											"failurePolicy": {
												"type": "string",
												"description": "FailurePolicy specifies what action to take if the hook fails."
											},
											"execNewPod": {
												"additionalProperties": false,
												"required": [
													"command",
													"containerName"
												],
												"description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
												"properties": {
													"containerName": {
														"type": "string",
														"description": "ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container."
													},
													"command": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": "array",
														"description": "Command is the action command and its arguments."
													},
													"volumes": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": [
															"array",
															"null"
														],
														"description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied."
													},
													"env": {
														"items": {
															"additionalProperties": false,
															"required": [
																"name"
															],
															"description": "EnvVar represents an environment variable present in a Container.",
															"properties": {
																"valueFrom": {
																	"additionalProperties": false,
																	"description": "EnvVarSource represents a source for the value of an EnvVar.",
																	"properties": {
																		"secretKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "SecretKeySelector selects a key of a Secret.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the Secret or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key of the secret to select from.  Must be a valid secret key."
																				}
																			}
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																				}
																			}
																		},
																		"configMapKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "Selects a key from a ConfigMap.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the ConfigMap or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key to select."
																				}
																			}
																		}
																	}
																},
																"name": {
																	"type": "string",
																	"description": "Name of the environment variable. Must be a C_IDENTIFIER."
																},
																"value": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "Env is a set of environment variables to supply to the hook pod's container."
													}
												}
											},
											"tagImages": {
												"items": {
													"additionalProperties": false,
													"required": [
														"containerName",
														"to"
													],
													"description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
													"properties": {
														"containerName": {
															"type": "string",
															"description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container."
														},
														"to": {
															"additionalProperties": false,
															"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
															"properties": {
																"kind": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"namespace": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "API version of the referent."
																},
																"fieldPath": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
																},
																"resourceVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
																},
																"uid": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
																}
															}
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag."
											}
										}
									},
									"post": {
										"additionalProperties": false,
										"required": [
											"failurePolicy"
										],
										"description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
										"properties": {
											"failurePolicy": {
												"type": "string",
												"description": "FailurePolicy specifies what action to take if the hook fails."
											},
											"execNewPod": {
												"additionalProperties": false,
												"required": [
													"command",
													"containerName"
												],
												"description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
												"properties": {
													"containerName": {
														"type": "string",
														"description": "ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container."
													},
													"command": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": "array",
														"description": "Command is the action command and its arguments."
													},
													"volumes": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": [
															"array",
															"null"
														],
														"description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied."
													},
													"env": {
														"items": {
															"additionalProperties": false,
															"required": [
																"name"
															],
															"description": "EnvVar represents an environment variable present in a Container.",
															"properties": {
																"valueFrom": {
																	"additionalProperties": false,
																	"description": "EnvVarSource represents a source for the value of an EnvVar.",
																	"properties": {
																		"secretKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "SecretKeySelector selects a key of a Secret.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the Secret or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key of the secret to select from.  Must be a valid secret key."
																				}
																			}
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																				}
																			}
																		},
																		"configMapKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "Selects a key from a ConfigMap.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the ConfigMap or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key to select."
																				}
																			}
																		}
																	}
																},
																"name": {
																	"type": "string",
																	"description": "Name of the environment variable. Must be a C_IDENTIFIER."
																},
																"value": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "Env is a set of environment variables to supply to the hook pod's container."
													}
												}
											},
											"tagImages": {
												"items": {
													"additionalProperties": false,
													"required": [
														"containerName",
														"to"
													],
													"description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
													"properties": {
														"containerName": {
															"type": "string",
															"description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container."
														},
														"to": {
															"additionalProperties": false,
															"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
															"properties": {
																"kind": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"namespace": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "API version of the referent."
																},
																"fieldPath": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
																},
																"resourceVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
																},
																"uid": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
																}
															}
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag."
											}
										}
									},
									"mid": {
										"additionalProperties": false,
										"required": [
											"failurePolicy"
										],
										"description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
										"properties": {
											"failurePolicy": {
												"type": "string",
												"description": "FailurePolicy specifies what action to take if the hook fails."
											},
											"execNewPod": {
												"additionalProperties": false,
												"required": [
													"command",
													"containerName"
												],
												"description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
												"properties": {
													"containerName": {
														"type": "string",
														"description": "ContainerName is the name of a container in the deployment pod template whose Docker image will be used for the hook pod's container."
													},
													"command": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": "array",
														"description": "Command is the action command and its arguments."
													},
													"volumes": {
														"items": {
															"type": [
																"string",
																"null"
															]
														},
														"type": [
															"array",
															"null"
														],
														"description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied."
													},
													"env": {
														"items": {
															"additionalProperties": false,
															"required": [
																"name"
															],
															"description": "EnvVar represents an environment variable present in a Container.",
															"properties": {
																"valueFrom": {
																	"additionalProperties": false,
																	"description": "EnvVarSource represents a source for the value of an EnvVar.",
																	"properties": {
																		"secretKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "SecretKeySelector selects a key of a Secret.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the Secret or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key of the secret to select from.  Must be a valid secret key."
																				}
																			}
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																				}
																			}
																		},
																		"configMapKeyRef": {
																			"additionalProperties": false,
																			"required": [
																				"key"
																			],
																			"description": "Selects a key from a ConfigMap.",
																			"properties": {
																				"optional": {
																					"type": "boolean",
																					"description": "Specify whether the ConfigMap or it's key must be defined"
																				},
																				"name": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																				},
																				"key": {
																					"type": "string",
																					"description": "The key to select."
																				}
																			}
																		}
																	}
																},
																"name": {
																	"type": "string",
																	"description": "Name of the environment variable. Must be a C_IDENTIFIER."
																},
																"value": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "Env is a set of environment variables to supply to the hook pod's container."
													}
												}
											},
											"tagImages": {
												"items": {
													"additionalProperties": false,
													"required": [
														"containerName",
														"to"
													],
													"description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
													"properties": {
														"containerName": {
															"type": "string",
															"description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container."
														},
														"to": {
															"additionalProperties": false,
															"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
															"properties": {
																"kind": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"namespace": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "API version of the referent."
																},
																"fieldPath": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
																},
																"resourceVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
																},
																"uid": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
																}
															}
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag."
											}
										}
									},
									"timeoutSeconds": {
										"type": "integer",
										"description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
										"format": "int64"
									}
								}
							},
							"type": {
								"type": [
									"string",
									"null"
								],
								"description": "Type is the name of a deployment strategy."
							},
							"annotations": {
								"type": "object",
								"description": "Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods."
							},
							"resources": {
								"additionalProperties": false,
								"description": "ResourceRequirements describes the compute resource requirements.",
								"properties": {
									"requests": {
										"type": "object",
										"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
									},
									"limits": {
										"type": "object",
										"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
									}
								}
							}
						}
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"automountServiceAccountToken": {
						"type": "boolean",
						"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
					},
					"minReadySeconds": {
						"type": "integer",
						"description": "MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
						"format": "int32"
					},
					"securityContext": {
						"additionalProperties": false,
						"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
						"properties": {
							"runAsNonRoot": {
								"type": "boolean",
								"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
							},
							"fsGroup": {
								"type": "integer",
								"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
								"format": "int64"
							},
							"seLinuxOptions": {
								"additionalProperties": false,
								"description": "SELinuxOptions are the labels to be applied to the container",
								"properties": {
									"type": {
										"type": [
											"string",
											"null"
										],
										"description": "Type is a SELinux type label that applies to the container."
									},
									"role": {
										"type": [
											"string",
											"null"
										],
										"description": "Role is a SELinux role label that applies to the container."
									},
									"user": {
										"type": [
											"string",
											"null"
										],
										"description": "User is a SELinux user label that applies to the container."
									},
									"level": {
										"type": [
											"string",
											"null"
										],
										"description": "Level is SELinux level label that applies to the container."
									}
								}
							},
							"supplementalGroups": {
								"items": {
									"type": "integer",
									"format": "int64"
								},
								"type": [
									"array",
									"null"
								],
								"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
							},
							"runAsUser": {
								"type": "integer",
								"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
								"format": "int64"
							}
						}
					},
					"nodeName": {
						"type": [
							"string",
							"null"
						],
						"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
					},
					"hostAliases": {
						"items": {
							"additionalProperties": false,
							"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
							"properties": {
								"ip": {
									"type": [
										"string",
										"null"
									],
									"description": "IP address of the host file entry."
								},
								"hostnames": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Hostnames for the above IP address."
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "ip"
					},
					"hostname": {
						"type": [
							"string",
							"null"
						],
						"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
					},
					"serviceAccount": {
						"type": [
							"string",
							"null"
						],
						"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
					},
					"nodeSelector": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"affinity": {
						"additionalProperties": false,
						"description": "Affinity is a group of affinity scheduling rules.",
						"properties": {
							"podAffinity": {
								"additionalProperties": false,
								"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"nodeAffinity": {
								"additionalProperties": false,
								"description": "Node affinity is a group of node affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"additionalProperties": false,
										"required": [
											"nodeSelectorTerms"
										],
										"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
										"properties": {
											"nodeSelectorTerms": {
												"items": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"type": "array",
												"description": "Required. A list of node selector terms. The terms are ORed."
											}
										}
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"preference"
											],
											"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
											"properties": {
												"preference": {
													"additionalProperties": false,
													"required": [
														"matchExpressions"
													],
													"description": "A null or empty node selector term matches no objects.",
													"properties": {
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "The label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": "array",
															"description": "Required. A list of node selector requirements. The requirements are ANDed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
									}
								}
							},
							"podAntiAffinity": {
								"additionalProperties": false,
								"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
								"properties": {
									"requiredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
											"properties": {
												"labelSelector": {
													"additionalProperties": false,
													"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
													"properties": {
														"matchLabels": {
															"additionalProperties": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "object",
															"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
														},
														"matchExpressions": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"operator"
																],
																"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																"properties": {
																	"operator": {
																		"type": "string",
																		"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																	},
																	"values": {
																		"items": {
																			"type": [
																				"string",
																				"null"
																			]
																		},
																		"type": [
																			"array",
																			"null"
																		],
																		"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																	},
																	"key": {
																		"x-kubernetes-patch-merge-key": "key",
																		"type": "string",
																		"description": "key is the label key that the selector applies to.",
																		"x-kubernetes-patch-strategy": "merge"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
														}
													}
												},
												"namespaces": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
												},
												"topologyKey": {
													"type": [
														"string",
														"null"
													],
													"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\" If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
									},
									"preferredDuringSchedulingIgnoredDuringExecution": {
										"items": {
											"additionalProperties": false,
											"required": [
												"weight",
												"podAffinityTerm"
											],
											"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
											"properties": {
												"podAffinityTerm": {
													"additionalProperties": false,
													"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
													"properties": {
														"labelSelector": {
															"additionalProperties": false,
															"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
															"properties": {
																"matchLabels": {
																	"additionalProperties": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": "object",
																	"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																},
																"matchExpressions": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"key",
																			"operator"
																		],
																		"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		"properties": {
																			"operator": {
																				"type": "string",
																				"description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
																			},
																			"values": {
																				"items": {
																					"type": [
																						"string",
																						"null"
																					]
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																			},
																			"key": {
																				"x-kubernetes-patch-merge-key": "key",
																				"type": "string",
																				"description": "key is the label key that the selector applies to.",
																				"x-kubernetes-patch-strategy": "merge"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																}
															}
														},
														"namespaces": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
														},
														"topologyKey": {
															"type": [
																"string",
																"null"
															],
															"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
														}
													}
												},
												"weight": {
													"type": "integer",
													"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
													"format": "int32"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
									}
								}
							}
						}
					},
					"template": {
						"additionalProperties": false,
						"description": "PodTemplateSpec describes the data a pod should have when created from a template",
						"properties": {
							"spec": {
								"additionalProperties": false,
								"required": [
									"containers"
								],
								"description": "PodSpec is a description of a pod.",
								"properties": {
									"dnsPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
									},
									"hostNetwork": {
										"type": "boolean",
										"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
									},
									"restartPolicy": {
										"type": [
											"string",
											"null"
										],
										"description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
									},
									"automountServiceAccountToken": {
										"type": "boolean",
										"description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
									},
									"priorityClassName": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, indicates the pod's priority. \"SYSTEM\" is a special keyword which indicates the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default."
									},
									"securityContext": {
										"additionalProperties": false,
										"description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
										"properties": {
											"runAsNonRoot": {
												"type": "boolean",
												"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
											},
											"fsGroup": {
												"type": "integer",
												"description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw ",
												"format": "int64"
											},
											"seLinuxOptions": {
												"additionalProperties": false,
												"description": "SELinuxOptions are the labels to be applied to the container",
												"properties": {
													"type": {
														"type": [
															"string",
															"null"
														],
														"description": "Type is a SELinux type label that applies to the container."
													},
													"role": {
														"type": [
															"string",
															"null"
														],
														"description": "Role is a SELinux role label that applies to the container."
													},
													"user": {
														"type": [
															"string",
															"null"
														],
														"description": "User is a SELinux user label that applies to the container."
													},
													"level": {
														"type": [
															"string",
															"null"
														],
														"description": "Level is SELinux level label that applies to the container."
													}
												}
											},
											"supplementalGroups": {
												"items": {
													"type": "integer"
												},
												"type": [
													"array",
													"null"
												],
												"description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
											},
											"runAsUser": {
												"type": "integer",
												"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
												"format": "int64"
											}
										}
									},
									"nodeName": {
										"type": [
											"string",
											"null"
										],
										"description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
									},
									"hostAliases": {
										"items": {
											"additionalProperties": false,
											"description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
											"properties": {
												"ip": {
													"type": [
														"string",
														"null"
													],
													"description": "IP address of the host file entry."
												},
												"hostnames": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Hostnames for the above IP address."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods."
									},
									"hostname": {
										"type": [
											"string",
											"null"
										],
										"description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
									},
									"serviceAccount": {
										"type": [
											"string",
											"null"
										],
										"description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
									},
									"nodeSelector": {
										"type": "object",
										"description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
									},
									"priority": {
										"type": "integer",
										"description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
										"format": "int32"
									},
									"affinity": {
										"additionalProperties": false,
										"description": "Affinity is a group of affinity scheduling rules.",
										"properties": {
											"podAffinity": {
												"additionalProperties": false,
												"description": "Pod affinity is a group of inter pod affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"type": "string",
																						"description": "key is the label key that the selector applies to."
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"type": "string",
																								"description": "key is the label key that the selector applies to."
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"nodeAffinity": {
												"additionalProperties": false,
												"description": "Node affinity is a group of node affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"additionalProperties": false,
														"required": [
															"nodeSelectorTerms"
														],
														"description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
														"properties": {
															"nodeSelectorTerms": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"type": "string",
																						"description": "The label key that the selector applies to."
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"type": "array",
																"description": "Required. A list of node selector terms. The terms are ORed."
															}
														}
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"preference"
															],
															"description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
															"properties": {
																"preference": {
																	"additionalProperties": false,
																	"required": [
																		"matchExpressions"
																	],
																	"description": "A null or empty node selector term matches no objects.",
																	"properties": {
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"type": "string",
																						"description": "The label key that the selector applies to."
																					}
																				}
																			},
																			"type": "array",
																			"description": "Required. A list of node selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
													}
												}
											},
											"podAntiAffinity": {
												"additionalProperties": false,
												"description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
												"properties": {
													"requiredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
															"properties": {
																"labelSelector": {
																	"additionalProperties": false,
																	"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																	"properties": {
																		"matchLabels": {
																			"type": "object",
																			"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																		},
																		"matchExpressions": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"key",
																					"operator"
																				],
																				"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				"properties": {
																					"operator": {
																						"type": "string",
																						"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
																					},
																					"values": {
																						"items": {
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						"type": [
																							"array",
																							"null"
																						],
																						"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																					},
																					"key": {
																						"type": "string",
																						"description": "key is the label key that the selector applies to."
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																		}
																	}
																},
																"namespaces": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																},
																"topologyKey": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
													},
													"preferredDuringSchedulingIgnoredDuringExecution": {
														"items": {
															"additionalProperties": false,
															"required": [
																"weight",
																"podAffinityTerm"
															],
															"description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
															"properties": {
																"podAffinityTerm": {
																	"additionalProperties": false,
																	"description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running",
																	"properties": {
																		"labelSelector": {
																			"additionalProperties": false,
																			"description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																			"properties": {
																				"matchLabels": {
																					"type": "object",
																					"description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
																				},
																				"matchExpressions": {
																					"items": {
																						"additionalProperties": false,
																						"required": [
																							"key",
																							"operator"
																						],
																						"description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						"properties": {
																							"operator": {
																								"type": "string",
																								"description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
																							},
																							"values": {
																								"items": {
																									"type": [
																										"string",
																										"null"
																									]
																								},
																								"type": [
																									"array",
																									"null"
																								],
																								"description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
																							},
																							"key": {
																								"type": "string",
																								"description": "key is the label key that the selector applies to."
																							}
																						}
																					},
																					"type": [
																						"array",
																						"null"
																					],
																					"description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
																				}
																			}
																		},
																		"namespaces": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
																		},
																		"topologyKey": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
																		}
																	}
																},
																"weight": {
																	"type": "integer",
																	"description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
																	"format": "int32"
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
													}
												}
											}
										}
									},
									"tolerations": {
										"items": {
											"additionalProperties": false,
											"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
											"properties": {
												"operator": {
													"type": [
														"string",
														"null"
													],
													"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
												},
												"tolerationSeconds": {
													"type": "integer",
													"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
													"format": "int64"
												},
												"effect": {
													"type": [
														"string",
														"null"
													],
													"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
												},
												"key": {
													"type": [
														"string",
														"null"
													],
													"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "If specified, the pod's tolerations."
									},
									"subdomain": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
									},
									"containers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"type": "string",
																	"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"type": "string",
																	"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPropagation": {},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated."
												},
												"image": {
													"type": [
														"string",
														"null"
													],
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated."
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"type": "string",
																	"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"type": "string",
																	"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"allowPrivilegeEscalation": {
															"type": "boolean",
															"description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN"
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"type": "string",
																			"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"type": "string",
																			"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"type": "string",
																			"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"type": "string",
																			"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated."
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": "array",
										"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
									},
									"serviceAccountName": {
										"type": [
											"string",
											"null"
										],
										"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
									},
									"schedulerName": {
										"type": [
											"string",
											"null"
										],
										"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
									},
									"hostIPC": {
										"type": "boolean",
										"description": "Use the host's ipc namespace. Optional: Default to false."
									},
									"activeDeadlineSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
										"format": "int64"
									},
									"terminationGracePeriodSeconds": {
										"type": "integer",
										"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
										"format": "int64"
									},
									"hostPID": {
										"type": "boolean",
										"description": "Use the host's pid namespace. Optional: Default to false."
									},
									"volumes": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
											"properties": {
												"portworxVolume": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "PortworxVolumeSource represents a Portworx volume resource.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeID": {
															"type": "string",
															"description": "VolumeID uniquely identifies a Portworx volume"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"glusterfs": {
													"additionalProperties": false,
													"required": [
														"endpoints",
														"path"
													],
													"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														},
														"endpoints": {
															"type": "string",
															"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
														}
													}
												},
												"gitRepo": {
													"additionalProperties": false,
													"required": [
														"repository"
													],
													"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
													"properties": {
														"directory": {
															"type": [
																"string",
																"null"
															],
															"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
														},
														"repository": {
															"type": "string",
															"description": "Repository URL"
														},
														"revision": {
															"type": [
																"string",
																"null"
															],
															"description": "Commit hash for the specified revision."
														}
													}
												},
												"flocker": {
													"additionalProperties": false,
													"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"datasetName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
														},
														"datasetUUID": {
															"type": [
																"string",
																"null"
															],
															"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
														}
													}
												},
												"storageos": {
													"additionalProperties": false,
													"description": "Represents a StorageOS persistent volume resource.",
													"properties": {
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"volumeNamespace": {
															"type": [
																"string",
																"null"
															],
															"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"iscsi": {
													"additionalProperties": false,
													"required": [
														"targetPortal",
														"iqn",
														"lun"
													],
													"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
													"properties": {
														"targetPortal": {
															"type": "string",
															"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"portals": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
														},
														"chapAuthSession": {
															"type": "boolean",
															"description": "whether support iSCSI Session CHAP authentication"
														},
														"initiatorName": {
															"type": [
																"string",
																"null"
															],
															"description": "Custom iSCSI initiator name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection."
														},
														"iscsiInterface": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
														},
														"chapAuthDiscovery": {
															"type": "boolean",
															"description": "whether support iSCSI Discovery CHAP authentication"
														},
														"iqn": {
															"type": "string",
															"description": "Target iSCSI Qualified Name."
														},
														"lun": {
															"type": "integer",
															"description": "iSCSI target lun number.",
															"format": "int32"
														}
													}
												},
												"projected": {
													"additionalProperties": false,
													"required": [
														"sources"
													],
													"description": "Represents a projected volume source",
													"properties": {
														"sources": {
															"items": {
																"additionalProperties": false,
																"description": "Projection that may be projected along with other supported volume types",
																"properties": {
																	"configMap": {
																		"additionalProperties": false,
																		"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's keys must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"secret": {
																		"additionalProperties": false,
																		"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"key",
																						"path"
																					],
																					"description": "Maps a string key to a path within a volume.",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"key": {
																							"type": "string",
																							"description": "The key to project."
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
																			},
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or its key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			}
																		}
																	},
																	"downwardAPI": {
																		"additionalProperties": false,
																		"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
																		"properties": {
																			"items": {
																				"items": {
																					"additionalProperties": false,
																					"required": [
																						"path"
																					],
																					"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																					"properties": {
																						"path": {
																							"type": "string",
																							"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																						},
																						"fieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"fieldPath"
																							],
																							"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																							"properties": {
																								"fieldPath": {
																									"type": "string",
																									"description": "Path of the field to select in the specified API version."
																								},
																								"apiVersion": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																								}
																							}
																						},
																						"mode": {
																							"type": "integer",
																							"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																							"format": "int32"
																						},
																						"resourceFieldRef": {
																							"additionalProperties": false,
																							"required": [
																								"resource"
																							],
																							"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																							"properties": {
																								"containerName": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Container name: required for volumes, optional for env vars"
																								},
																								"resource": {
																									"type": "string",
																									"description": "Required: resource to select"
																								},
																								"divisor": {
																									"type": [
																										"string",
																										"null"
																									],
																									"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																								}
																							}
																						}
																					}
																				},
																				"type": [
																					"array",
																					"null"
																				],
																				"description": "Items is a list of DownwardAPIVolume file"
																			}
																		}
																	}
																}
															},
															"type": "array",
															"description": "list of volume projections"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"secret": {
													"additionalProperties": false,
													"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the Secret or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"secretName": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
														}
													}
												},
												"scaleIO": {
													"additionalProperties": false,
													"required": [
														"gateway",
														"system",
														"secretRef"
													],
													"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
													"properties": {
														"storageMode": {
															"type": [
																"string",
																"null"
															],
															"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
														},
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"protectionDomain": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
														},
														"volumeName": {
															"type": [
																"string",
																"null"
															],
															"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
														},
														"sslEnabled": {
															"type": "boolean",
															"description": "Flag to enable/disable SSL communication with Gateway, default false"
														},
														"system": {
															"type": "string",
															"description": "The name of the storage system as configured in ScaleIO."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"storagePool": {
															"type": [
																"string",
																"null"
															],
															"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
														},
														"gateway": {
															"type": "string",
															"description": "The host address of the ScaleIO API Gateway."
														}
													}
												},
												"photonPersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdID"
													],
													"description": "Represents a Photon Controller persistent disk resource.",
													"properties": {
														"pdID": {
															"type": "string",
															"description": "ID that identifies Photon Controller persistent disk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"azureDisk": {
													"additionalProperties": false,
													"required": [
														"diskName",
														"diskURI"
													],
													"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
													"properties": {
														"diskName": {
															"type": "string",
															"description": "The Name of the data disk in the blob storage"
														},
														"cachingMode": {},
														"kind": {},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														},
														"diskURI": {
															"type": "string",
															"description": "The URI the data disk in the blob storage"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														}
													}
												},
												"fc": {
													"additionalProperties": false,
													"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
													"properties": {
														"targetWWNs": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Optional: FC target worldwide names (WWNs)"
														},
														"wwids": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously."
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"lun": {
															"type": "integer",
															"description": "Optional: FC target lun number",
															"format": "int32"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"flexVolume": {
													"additionalProperties": false,
													"required": [
														"driver"
													],
													"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"driver": {
															"type": "string",
															"description": "Driver is the name of the driver to use for this volume."
														},
														"options": {
															"type": "object",
															"description": "Optional: Extra command options if any."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
														}
													}
												},
												"emptyDir": {
													"additionalProperties": false,
													"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
													"properties": {
														"sizeLimit": {
															"type": [
																"string",
																"null"
															],
															"description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
														},
														"medium": {
															"type": [
																"string",
																"null"
															],
															"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
														}
													}
												},
												"persistentVolumeClaim": {
													"additionalProperties": false,
													"required": [
														"claimName"
													],
													"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
														},
														"claimName": {
															"type": "string",
															"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
														}
													}
												},
												"configMap": {
													"additionalProperties": false,
													"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"key",
																	"path"
																],
																"description": "Maps a string key to a path within a volume.",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"key": {
																		"type": "string",
																		"description": "The key to project."
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
														},
														"optional": {
															"type": "boolean",
															"description": "Specify whether the ConfigMap or it's keys must be defined"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														},
														"name": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
														}
													}
												},
												"rbd": {
													"additionalProperties": false,
													"required": [
														"monitors",
														"image"
													],
													"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"image": {
															"type": "string",
															"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"keyring": {
															"type": [
																"string",
																"null"
															],
															"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														},
														"pool": {
															"type": [
																"string",
																"null"
															],
															"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"azureFile": {
													"additionalProperties": false,
													"required": [
														"secretName",
														"shareName"
													],
													"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
													"properties": {
														"shareName": {
															"type": "string",
															"description": "Share Name"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
														},
														"secretName": {
															"type": "string",
															"description": "the name of secret that contains Azure Storage Account Name and Key"
														}
													}
												},
												"quobyte": {
													"additionalProperties": false,
													"required": [
														"registry",
														"volume"
													],
													"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"volume": {
															"type": "string",
															"description": "Volume is a string that references an already created Quobyte volume by name."
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
														},
														"group": {
															"type": [
																"string",
																"null"
															],
															"description": "Group to map volume access to Default is no group"
														},
														"registry": {
															"type": "string",
															"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "User to map volume access to Defaults to serivceaccount user"
														}
													}
												},
												"hostPath": {
													"additionalProperties": false,
													"required": [
														"path"
													],
													"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
														},
														"type": {}
													}
												},
												"nfs": {
													"additionalProperties": false,
													"required": [
														"server",
														"path"
													],
													"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"path": {
															"type": "string",
															"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														},
														"server": {
															"type": "string",
															"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
														}
													}
												},
												"vsphereVolume": {
													"additionalProperties": false,
													"required": [
														"volumePath"
													],
													"description": "Represents a vSphere volume resource.",
													"properties": {
														"storagePolicyName": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile name."
														},
														"volumePath": {
															"type": "string",
															"description": "Path that identifies vSphere volume vmdk"
														},
														"storagePolicyID": {
															"type": [
																"string",
																"null"
															],
															"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
														}
													}
												},
												"cinder": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"volumeID": {
															"type": "string",
															"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
														}
													}
												},
												"awsElasticBlockStore": {
													"additionalProperties": false,
													"required": [
														"volumeID"
													],
													"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
															"format": "int32"
														},
														"volumeID": {
															"type": "string",
															"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
														}
													}
												},
												"cephfs": {
													"additionalProperties": false,
													"required": [
														"monitors"
													],
													"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
													"properties": {
														"secretRef": {
															"additionalProperties": false,
															"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
															"properties": {
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																}
															}
														},
														"secretFile": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"readOnly": {
															"type": "boolean",
															"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"user": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														},
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
														},
														"monitors": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": "array",
															"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
														}
													}
												},
												"downwardAPI": {
													"additionalProperties": false,
													"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
													"properties": {
														"items": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"path"
																],
																"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																"properties": {
																	"path": {
																		"type": "string",
																		"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"mode": {
																		"type": "integer",
																		"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																		"format": "int32"
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																			}
																		}
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Items is a list of downward API volume file"
														},
														"defaultMode": {
															"type": "integer",
															"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
															"format": "int32"
														}
													}
												},
												"gcePersistentDisk": {
													"additionalProperties": false,
													"required": [
														"pdName"
													],
													"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
													"properties": {
														"readOnly": {
															"type": "boolean",
															"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"partition": {
															"type": "integer",
															"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
															"format": "int32"
														},
														"pdName": {
															"type": "string",
															"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														},
														"fsType": {
															"type": [
																"string",
																"null"
															],
															"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
														}
													}
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes"
									},
									"initContainers": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "A single application container that you want to run within a pod.",
											"properties": {
												"livenessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"type": "string",
																	"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"type": "string",
																	"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"stdin": {
													"type": "boolean",
													"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
												},
												"terminationMessagePath": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
												},
												"name": {
													"type": "string",
													"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
												},
												"envFrom": {
													"items": {
														"additionalProperties": false,
														"description": "EnvFromSource represents the source of a set of ConfigMaps",
														"properties": {
															"prefix": {
																"type": [
																	"string",
																	"null"
																],
																"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
															},
															"configMapRef": {
																"additionalProperties": false,
																"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the ConfigMap must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															},
															"secretRef": {
																"additionalProperties": false,
																"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
																"properties": {
																	"optional": {
																		"type": "boolean",
																		"description": "Specify whether the Secret must be defined"
																	},
																	"name": {
																		"type": [
																			"string",
																			"null"
																		],
																		"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																	}
																}
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
												},
												"volumeMounts": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"mountPath"
														],
														"description": "VolumeMount describes a mounting of a Volume within a container.",
														"properties": {
															"readOnly": {
																"type": "boolean",
																"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
															},
															"mountPropagation": {},
															"subPath": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
															},
															"name": {
																"type": "string",
																"description": "This must match the Name of a Volume."
															},
															"mountPath": {
																"type": "string",
																"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Pod volumes to mount into the container's filesystem. Cannot be updated."
												},
												"image": {
													"type": [
														"string",
														"null"
													],
													"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
												},
												"args": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"workingDir": {
													"type": [
														"string",
														"null"
													],
													"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
												},
												"tty": {
													"type": "boolean",
													"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
												},
												"terminationMessagePolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
												},
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
												},
												"env": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name"
														],
														"description": "EnvVar represents an environment variable present in a Container.",
														"properties": {
															"valueFrom": {
																"additionalProperties": false,
																"description": "EnvVarSource represents a source for the value of an EnvVar.",
																"properties": {
																	"secretKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "SecretKeySelector selects a key of a Secret.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the Secret or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key of the secret to select from.  Must be a valid secret key."
																			}
																		}
																	},
																	"fieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"fieldPath"
																		],
																		"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																		"properties": {
																			"fieldPath": {
																				"type": "string",
																				"description": "Path of the field to select in the specified API version."
																			},
																			"apiVersion": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																			}
																		}
																	},
																	"resourceFieldRef": {
																		"additionalProperties": false,
																		"required": [
																			"resource"
																		],
																		"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																		"properties": {
																			"containerName": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Container name: required for volumes, optional for env vars"
																			},
																			"resource": {
																				"type": "string",
																				"description": "Required: resource to select"
																			},
																			"divisor": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																			}
																		}
																	},
																	"configMapKeyRef": {
																		"additionalProperties": false,
																		"required": [
																			"key"
																		],
																		"description": "Selects a key from a ConfigMap.",
																		"properties": {
																			"optional": {
																				"type": "boolean",
																				"description": "Specify whether the ConfigMap or it's key must be defined"
																			},
																			"name": {
																				"type": [
																					"string",
																					"null"
																				],
																				"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																			},
																			"key": {
																				"type": "string",
																				"description": "The key to select."
																			}
																		}
																	}
																}
															},
															"name": {
																"type": "string",
																"description": "Name of the environment variable. Must be a C_IDENTIFIER."
															},
															"value": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of environment variables to set in the container. Cannot be updated."
												},
												"imagePullPolicy": {
													"type": [
														"string",
														"null"
													],
													"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
												},
												"readinessProbe": {
													"additionalProperties": false,
													"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
													"properties": {
														"httpGet": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "HTTPGetAction describes an action based on HTTP Get requests.",
															"properties": {
																"path": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Path to access on the HTTP server."
																},
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																},
																"scheme": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																},
																"httpHeaders": {
																	"items": {
																		"additionalProperties": false,
																		"required": [
																			"name",
																			"value"
																		],
																		"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																		"properties": {
																			"name": {
																				"type": "string",
																				"description": "The header field name"
																			},
																			"value": {
																				"type": "string",
																				"description": "The header field value"
																			}
																		}
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Custom headers to set in the request. HTTP allows repeated headers."
																},
																"port": {
																	"type": "string",
																	"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"timeoutSeconds": {
															"type": "integer",
															"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"exec": {
															"additionalProperties": false,
															"description": "ExecAction describes a \"run in container\" action.",
															"properties": {
																"command": {
																	"items": {
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																}
															}
														},
														"initialDelaySeconds": {
															"type": "integer",
															"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
															"format": "int32"
														},
														"tcpSocket": {
															"additionalProperties": false,
															"required": [
																"port"
															],
															"description": "TCPSocketAction describes an action based on opening a socket",
															"properties": {
																"host": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Optional: Host name to connect to, defaults to the pod IP."
																},
																"port": {
																	"type": "string",
																	"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																}
															}
														},
														"periodSeconds": {
															"type": "integer",
															"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
															"format": "int32"
														},
														"successThreshold": {
															"type": "integer",
															"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
															"format": "int32"
														},
														"failureThreshold": {
															"type": "integer",
															"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
															"format": "int32"
														}
													}
												},
												"securityContext": {
													"additionalProperties": false,
													"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
													"properties": {
														"readOnlyRootFilesystem": {
															"type": "boolean",
															"description": "Whether this container has a read-only root filesystem. Default is false."
														},
														"allowPrivilegeEscalation": {
															"type": "boolean",
															"description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN"
														},
														"runAsUser": {
															"type": "integer",
															"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
															"format": "int64"
														},
														"capabilities": {
															"additionalProperties": false,
															"description": "Adds and removes POSIX capabilities from running containers.",
															"properties": {
																"add": {
																	"items": {},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Added capabilities"
																},
																"drop": {
																	"items": {},
																	"type": [
																		"array",
																		"null"
																	],
																	"description": "Removed capabilities"
																}
															}
														},
														"runAsNonRoot": {
															"type": "boolean",
															"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
														},
														"seLinuxOptions": {
															"additionalProperties": false,
															"description": "SELinuxOptions are the labels to be applied to the container",
															"properties": {
																"type": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Type is a SELinux type label that applies to the container."
																},
																"role": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Role is a SELinux role label that applies to the container."
																},
																"user": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "User is a SELinux user label that applies to the container."
																},
																"level": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Level is SELinux level label that applies to the container."
																}
															}
														},
														"privileged": {
															"type": "boolean",
															"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
														}
													}
												},
												"lifecycle": {
													"additionalProperties": false,
													"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
													"properties": {
														"preStop": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"type": "string",
																			"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"type": "string",
																			"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														},
														"postStart": {
															"additionalProperties": false,
															"description": "Handler defines a specific action that should be taken",
															"properties": {
																"httpGet": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "HTTPGetAction describes an action based on HTTP Get requests.",
																	"properties": {
																		"path": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Path to access on the HTTP server."
																		},
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
																		},
																		"scheme": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Scheme to use for connecting to the host. Defaults to HTTP."
																		},
																		"httpHeaders": {
																			"items": {
																				"additionalProperties": false,
																				"required": [
																					"name",
																					"value"
																				],
																				"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																				"properties": {
																					"name": {
																						"type": "string",
																						"description": "The header field name"
																					},
																					"value": {
																						"type": "string",
																						"description": "The header field value"
																					}
																				}
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Custom headers to set in the request. HTTP allows repeated headers."
																		},
																		"port": {
																			"type": "string",
																			"description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"tcpSocket": {
																	"additionalProperties": false,
																	"required": [
																		"port"
																	],
																	"description": "TCPSocketAction describes an action based on opening a socket",
																	"properties": {
																		"host": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "Optional: Host name to connect to, defaults to the pod IP."
																		},
																		"port": {
																			"type": "string",
																			"description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
																		}
																	}
																},
																"exec": {
																	"additionalProperties": false,
																	"description": "ExecAction describes a \"run in container\" action.",
																	"properties": {
																		"command": {
																			"items": {
																				"type": [
																					"string",
																					"null"
																				]
																			},
																			"type": [
																				"array",
																				"null"
																			],
																			"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
																		}
																	}
																}
															}
														}
													}
												},
												"ports": {
													"items": {
														"additionalProperties": false,
														"required": [
															"containerPort"
														],
														"description": "ContainerPort represents a network port in a single container.",
														"properties": {
															"hostPort": {
																"type": "integer",
																"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
																"format": "int32"
															},
															"protocol": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
															},
															"containerPort": {
																"type": "integer",
																"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
																"format": "int32"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
															},
															"hostIP": {
																"type": [
																	"string",
																	"null"
																],
																"description": "What host IP to bind the external port to."
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated."
												},
												"resources": {
													"additionalProperties": false,
													"description": "ResourceRequirements describes the compute resource requirements.",
													"properties": {
														"requests": {
															"type": "object",
															"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														},
														"limits": {
															"type": "object",
															"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
														}
													}
												},
												"stdinOnce": {
													"type": "boolean",
													"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"
									},
									"imagePullSecrets": {
										"items": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod"
									}
								}
							},
							"metadata": {
								"additionalProperties": false,
								"description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
								"properties": {
									"uid": {
										"type": [
											"string",
											"null"
										],
										"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
									},
									"deletionTimestamp": {
										"type": [
											"string",
											"null"
										],
										"description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
									},
									"clusterName": {
										"type": [
											"string",
											"null"
										],
										"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
									},
									"deletionGracePeriodSeconds": {
										"type": "integer",
										"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
										"format": "int64"
									},
									"labels": {
										"type": "object",
										"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
									},
									"namespace": {
										"type": [
											"string",
											"null"
										],
										"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
									},
									"generation": {
										"type": "integer",
										"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
										"format": "int64"
									},
									"finalizers": {
										"items": {
											"type": [
												"string",
												"null"
											]
										},
										"type": [
											"array",
											"null"
										],
										"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
									},
									"generateName": {
										"type": [
											"string",
											"null"
										],
										"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
									},
									"initializers": {
										"additionalProperties": false,
										"required": [
											"pending"
										],
										"description": "Initializers tracks the progress of initialization.",
										"properties": {
											"result": {
												"additionalProperties": false,
												"description": "Status is a return value for calls that don't return other objects.",
												"properties": {
													"status": {
														"type": [
															"string",
															"null"
														],
														"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
													},
													"kind": {
														"type": [
															"string",
															"null"
														],
														"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
													},
													"code": {
														"type": "integer",
														"description": "Suggested HTTP return code for this status, 0 if not set.",
														"format": "int32"
													},
													"apiVersion": {
														"type": [
															"string",
															"null"
														],
														"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
													},
													"reason": {
														"type": [
															"string",
															"null"
														],
														"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
													},
													"details": {
														"additionalProperties": false,
														"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
														"properties": {
															"kind": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
															},
															"group": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The group attribute of the resource associated with the status StatusReason."
															},
															"uid": {
																"type": [
																	"string",
																	"null"
																],
																"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
															},
															"retryAfterSeconds": {
																"type": "integer",
																"description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
																"format": "int32"
															},
															"causes": {
																"items": {
																	"additionalProperties": false,
																	"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
																	"properties": {
																		"field": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
																		},
																		"message": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
																		},
																		"reason": {
																			"type": [
																				"string",
																				"null"
																			],
																			"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
															}
														}
													},
													"message": {
														"type": [
															"string",
															"null"
														],
														"description": "A human-readable description of the status of this operation."
													},
													"metadata": {
														"additionalProperties": false,
														"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
														"properties": {
															"continue": {
																"type": [
																	"string",
																	"null"
																],
																"description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response."
															},
															"selfLink": {
																"type": [
																	"string",
																	"null"
																],
																"description": "selfLink is a URL representing this object. Populated by the system. Read-only."
															},
															"resourceVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
															}
														}
													}
												}
											},
											"pending": {
												"items": {
													"additionalProperties": false,
													"required": [
														"name"
													],
													"description": "Initializer is information about an initializer that has not yet completed.",
													"properties": {
														"name": {
															"type": "string",
															"description": "name of the process that is responsible for initializing this object."
														}
													}
												},
												"type": "array",
												"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
											}
										}
									},
									"resourceVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
									},
									"ownerReferences": {
										"items": {
											"additionalProperties": false,
											"required": [
												"apiVersion",
												"kind",
												"name",
												"uid"
											],
											"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
											"properties": {
												"kind": {
													"type": "string",
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"uid": {
													"type": "string",
													"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
												},
												"apiVersion": {
													"type": "string",
													"description": "API version of the referent."
												},
												"controller": {
													"type": "boolean",
													"description": "If true, this reference points to the managing controller."
												},
												"blockOwnerDeletion": {
													"type": "boolean",
													"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
												},
												"name": {
													"type": "string",
													"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
									},
									"creationTimestamp": {
										"type": [
											"string",
											"null"
										],
										"description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
									},
									"annotations": {
										"type": "object",
										"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
									},
									"selfLink": {
										"type": [
											"string",
											"null"
										],
										"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
									},
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
									}
								}
							}
						}
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"test": {
						"type": "boolean",
						"description": "Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action."
					},
					"tolerations": {
						"items": {
							"additionalProperties": false,
							"description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
							"properties": {
								"operator": {
									"type": [
										"string",
										"null"
									],
									"description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
								},
								"value": {
									"type": [
										"string",
										"null"
									],
									"description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
								},
								"tolerationSeconds": {
									"type": "integer",
									"description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
									"format": "int64"
								},
								"effect": {
									"type": [
										"string",
										"null"
									],
									"description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
								},
								"key": {
									"x-kubernetes-patch-merge-key": "key",
									"type": [
										"string",
										"null"
									],
									"description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
									"x-kubernetes-patch-strategy": "merge"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "If specified, the pod's tolerations."
					},
					"revisionHistoryLimit": {
						"type": "integer",
						"description": "RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)",
						"format": "int32"
					},
					"subdomain": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"hostPID": {
						"type": "boolean",
						"description": "Use the host's pid namespace. Optional: Default to false."
					},
					"hostNetwork": {
						"type": "boolean",
						"description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
					},
					"serviceAccountName": {
						"type": [
							"string",
							"null"
						],
						"description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
					},
					"replicas": {
						"type": "integer",
						"description": "Replicas is the number of desired replicas.",
						"format": "int32"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"selector": {
						"type": "object",
						"description": "Selector is a label query over pods that should match the Replicas count."
					},
					"hostIPC": {
						"type": "boolean",
						"description": "Use the host's ipc namespace. Optional: Default to false."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"schedulerName": {
						"type": [
							"string",
							"null"
						],
						"description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"triggers": {
						"items": {
							"additionalProperties": false,
							"description": "DeploymentTriggerPolicy describes a policy for a single trigger that results in a new deployment.",
							"properties": {
								"imageChangeParams": {
									"additionalProperties": false,
									"required": [
										"from"
									],
									"description": "DeploymentTriggerImageChangeParams represents the parameters to the ImageChange trigger.",
									"properties": {
										"containerNames": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error."
										},
										"automatic": {
											"type": "boolean",
											"description": "Automatic means that the detection of a new tag value should result in an image update inside the pod template."
										},
										"lastTriggeredImage": {
											"type": [
												"string",
												"null"
											],
											"description": "LastTriggeredImage is the last image to be triggered."
										},
										"from": {
											"additionalProperties": false,
											"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
											"properties": {
												"kind": {
													"type": [
														"string",
														"null"
													],
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"namespace": {
													"type": [
														"string",
														"null"
													],
													"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
												},
												"apiVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "API version of the referent."
												},
												"fieldPath": {
													"type": [
														"string",
														"null"
													],
													"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
												},
												"resourceVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
												},
												"uid": {
													"type": [
														"string",
														"null"
													],
													"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
												}
											}
										}
									}
								},
								"type": {
									"type": [
										"string",
										"null"
									],
									"description": "Type of the trigger"
								}
							}
						},
						"type": "array",
						"description": "Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger."
					},
					"activeDeadlineSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
						"format": "int64"
					},
					"terminationGracePeriodSeconds": {
						"type": "integer",
						"description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
						"format": "int64"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"containers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": "array",
						"description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
					},
					"volumes": {
						"items": {
							"additionalProperties": false,
							"required": [
								"name"
							],
							"description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
							"properties": {
								"portworxVolume": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "PortworxVolumeSource represents a Portworx volume resource.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeID": {
											"type": "string",
											"description": "VolumeID uniquely identifies a Portworx volume"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"glusterfs": {
									"additionalProperties": false,
									"required": [
										"endpoints",
										"path"
									],
									"description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										},
										"endpoints": {
											"type": "string",
											"description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
										}
									}
								},
								"gitRepo": {
									"additionalProperties": false,
									"required": [
										"repository"
									],
									"description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
									"properties": {
										"directory": {
											"type": [
												"string",
												"null"
											],
											"description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
										},
										"repository": {
											"type": "string",
											"description": "Repository URL"
										},
										"revision": {
											"type": [
												"string",
												"null"
											],
											"description": "Commit hash for the specified revision."
										}
									}
								},
								"flocker": {
									"additionalProperties": false,
									"description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"datasetName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
										},
										"datasetUUID": {
											"type": [
												"string",
												"null"
											],
											"description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
										}
									}
								},
								"storageos": {
									"additionalProperties": false,
									"description": "Represents a StorageOS persistent volume resource.",
									"properties": {
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"volumeNamespace": {
											"type": [
												"string",
												"null"
											],
											"description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"iscsi": {
									"additionalProperties": false,
									"required": [
										"targetPortal",
										"iqn",
										"lun"
									],
									"description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
									"properties": {
										"targetPortal": {
											"type": "string",
											"description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"portals": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": [
												"array",
												"null"
											],
											"description": "iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
										},
										"chapAuthSession": {
											"type": "boolean",
											"description": "whether support iSCSI Session CHAP authentication"
										},
										"iscsiInterface": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
										},
										"chapAuthDiscovery": {
											"type": "boolean",
											"description": "whether support iSCSI Discovery CHAP authentication"
										},
										"iqn": {
											"type": "string",
											"description": "Target iSCSI Qualified Name."
										},
										"lun": {
											"type": "integer",
											"description": "iSCSI target lun number.",
											"format": "int32"
										}
									}
								},
								"projected": {
									"additionalProperties": false,
									"required": [
										"sources"
									],
									"description": "Represents a projected volume source",
									"properties": {
										"sources": {
											"items": {
												"additionalProperties": false,
												"description": "Projection that may be projected along with other supported volume types",
												"properties": {
													"configMap": {
														"additionalProperties": false,
														"description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's keys must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"secret": {
														"additionalProperties": false,
														"description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"key",
																		"path"
																	],
																	"description": "Maps a string key to a path within a volume.",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"key": {
																			"type": "string",
																			"description": "The key to project."
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
															},
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or its key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															}
														}
													},
													"downwardAPI": {
														"additionalProperties": false,
														"description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
														"properties": {
															"items": {
																"items": {
																	"additionalProperties": false,
																	"required": [
																		"path"
																	],
																	"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
																	"properties": {
																		"path": {
																			"type": "string",
																			"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
																		},
																		"fieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"fieldPath"
																			],
																			"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
																			"properties": {
																				"fieldPath": {
																					"type": "string",
																					"description": "Path of the field to select in the specified API version."
																				},
																				"apiVersion": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																				}
																			}
																		},
																		"mode": {
																			"type": "integer",
																			"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
																			"format": "int32"
																		},
																		"resourceFieldRef": {
																			"additionalProperties": false,
																			"required": [
																				"resource"
																			],
																			"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
																			"properties": {
																				"containerName": {
																					"type": [
																						"string",
																						"null"
																					],
																					"description": "Container name: required for volumes, optional for env vars"
																				},
																				"resource": {
																					"type": "string",
																					"description": "Required: resource to select"
																				},
																				"divisor": {
																					"oneOf": [
																						{
																							"type": [
																								"string",
																								"null"
																							]
																						},
																						{
																							"type": "integer"
																						}
																					]
																				}
																			}
																		}
																	}
																},
																"type": [
																	"array",
																	"null"
																],
																"description": "Items is a list of DownwardAPIVolume file"
															}
														}
													}
												}
											},
											"type": "array",
											"description": "list of volume projections"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"secret": {
									"additionalProperties": false,
									"description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the Secret or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"secretName": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
										}
									}
								},
								"scaleIO": {
									"additionalProperties": false,
									"required": [
										"gateway",
										"system",
										"secretRef"
									],
									"description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
									"properties": {
										"storageMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\")."
										},
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"protectionDomain": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of the Protection Domain for the configured storage (defaults to \"default\")."
										},
										"volumeName": {
											"type": [
												"string",
												"null"
											],
											"description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
										},
										"sslEnabled": {
											"type": "boolean",
											"description": "Flag to enable/disable SSL communication with Gateway, default false"
										},
										"system": {
											"type": "string",
											"description": "The name of the storage system as configured in ScaleIO."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"storagePool": {
											"type": [
												"string",
												"null"
											],
											"description": "The Storage Pool associated with the protection domain (defaults to \"default\")."
										},
										"gateway": {
											"type": "string",
											"description": "The host address of the ScaleIO API Gateway."
										}
									}
								},
								"photonPersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdID"
									],
									"description": "Represents a Photon Controller persistent disk resource.",
									"properties": {
										"pdID": {
											"type": "string",
											"description": "ID that identifies Photon Controller persistent disk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"azureDisk": {
									"additionalProperties": false,
									"required": [
										"diskName",
										"diskURI"
									],
									"description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
									"properties": {
										"diskName": {
											"type": "string",
											"description": "The Name of the data disk in the blob storage"
										},
										"cachingMode": {
											"type": [
												"string",
												"null"
											],
											"description": "Host Caching mode: None, Read Only, Read Write."
										},
										"kind": {
											"type": [
												"string",
												"null"
											],
											"description": "Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										},
										"diskURI": {
											"type": "string",
											"description": "The URI the data disk in the blob storage"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										}
									}
								},
								"fc": {
									"additionalProperties": false,
									"required": [
										"targetWWNs",
										"lun"
									],
									"description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"targetWWNs": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: FC target worldwide names (WWNs)"
										},
										"lun": {
											"type": "integer",
											"description": "Required: FC target lun number",
											"format": "int32"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"flexVolume": {
									"additionalProperties": false,
									"required": [
										"driver"
									],
									"description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"driver": {
											"type": "string",
											"description": "Driver is the name of the driver to use for this volume."
										},
										"options": {
											"additionalProperties": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "object",
											"description": "Optional: Extra command options if any."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
										}
									}
								},
								"emptyDir": {
									"additionalProperties": false,
									"description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
									"properties": {
										"sizeLimit": {
											"oneOf": [
												{
													"type": [
														"string",
														"null"
													]
												},
												{
													"type": "integer"
												}
											]
										},
										"medium": {
											"type": [
												"string",
												"null"
											],
											"description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
										}
									}
								},
								"persistentVolumeClaim": {
									"additionalProperties": false,
									"required": [
										"claimName"
									],
									"description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Will force the ReadOnly setting in VolumeMounts. Default false."
										},
										"claimName": {
											"type": "string",
											"description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
										}
									}
								},
								"configMap": {
									"additionalProperties": false,
									"description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"key",
													"path"
												],
												"description": "Maps a string key to a path within a volume.",
												"properties": {
													"path": {
														"type": "string",
														"description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"key": {
														"type": "string",
														"description": "The key to project."
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
										},
										"optional": {
											"type": "boolean",
											"description": "Specify whether the ConfigMap or it's keys must be defined"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										},
										"name": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
										}
									}
								},
								"rbd": {
									"additionalProperties": false,
									"required": [
										"monitors",
										"image"
									],
									"description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"image": {
											"type": "string",
											"description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"keyring": {
											"type": [
												"string",
												"null"
											],
											"description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										},
										"pool": {
											"type": [
												"string",
												"null"
											],
											"description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
										}
									}
								},
								"name": {
									"type": "string",
									"description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								},
								"azureFile": {
									"additionalProperties": false,
									"required": [
										"secretName",
										"shareName"
									],
									"description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
									"properties": {
										"shareName": {
											"type": "string",
											"description": "Share Name"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
										},
										"secretName": {
											"type": "string",
											"description": "the name of secret that contains Azure Storage Account Name and Key"
										}
									}
								},
								"quobyte": {
									"additionalProperties": false,
									"required": [
										"registry",
										"volume"
									],
									"description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"volume": {
											"type": "string",
											"description": "Volume is a string that references an already created Quobyte volume by name."
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
										},
										"group": {
											"type": [
												"string",
												"null"
											],
											"description": "Group to map volume access to Default is no group"
										},
										"registry": {
											"type": "string",
											"description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "User to map volume access to Defaults to serivceaccount user"
										}
									}
								},
								"hostPath": {
									"additionalProperties": false,
									"required": [
										"path"
									],
									"description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
										}
									}
								},
								"nfs": {
									"additionalProperties": false,
									"required": [
										"server",
										"path"
									],
									"description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										},
										"server": {
											"type": "string",
											"description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
										}
									}
								},
								"vsphereVolume": {
									"additionalProperties": false,
									"required": [
										"volumePath"
									],
									"description": "Represents a vSphere volume resource.",
									"properties": {
										"storagePolicyName": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile name."
										},
										"volumePath": {
											"type": "string",
											"description": "Path that identifies vSphere volume vmdk"
										},
										"storagePolicyID": {
											"type": [
												"string",
												"null"
											],
											"description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
										}
									}
								},
								"cinder": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"volumeID": {
											"type": "string",
											"description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
										}
									}
								},
								"awsElasticBlockStore": {
									"additionalProperties": false,
									"required": [
										"volumeID"
									],
									"description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
											"format": "int32"
										},
										"volumeID": {
											"type": "string",
											"description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
										}
									}
								},
								"cephfs": {
									"additionalProperties": false,
									"required": [
										"monitors"
									],
									"description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
									"properties": {
										"secretRef": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"secretFile": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"readOnly": {
											"type": "boolean",
											"description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"user": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										},
										"path": {
											"type": [
												"string",
												"null"
											],
											"description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
										},
										"monitors": {
											"items": {
												"type": [
													"string",
													"null"
												]
											},
											"type": "array",
											"description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
										}
									}
								},
								"downwardAPI": {
									"additionalProperties": false,
									"description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
									"properties": {
										"items": {
											"items": {
												"additionalProperties": false,
												"required": [
													"path"
												],
												"description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
												"properties": {
													"path": {
														"type": "string",
														"description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"mode": {
														"type": "integer",
														"description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
														"format": "int32"
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													}
												}
											},
											"type": [
												"array",
												"null"
											],
											"description": "Items is a list of downward API volume file"
										},
										"defaultMode": {
											"type": "integer",
											"description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
											"format": "int32"
										}
									}
								},
								"gcePersistentDisk": {
									"additionalProperties": false,
									"required": [
										"pdName"
									],
									"description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
									"properties": {
										"readOnly": {
											"type": "boolean",
											"description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"partition": {
											"type": "integer",
											"description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
											"format": "int32"
										},
										"pdName": {
											"type": "string",
											"description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										},
										"fsType": {
											"type": [
												"string",
												"null"
											],
											"description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
										}
									}
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"initContainers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"image"
							],
							"description": "Container defines a single application container that you want to run within a pod.",
							"properties": {
								"livenessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"stdin": {
									"type": "boolean",
									"description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
								},
								"terminationMessagePath": {
									"type": [
										"string",
										"null"
									],
									"description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
								},
								"envFrom": {
									"items": {
										"additionalProperties": false,
										"description": "EnvFromSource represents the source of a set of ConfigMaps",
										"properties": {
											"prefix": {
												"type": [
													"string",
													"null"
												],
												"description": "An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
											},
											"configMapRef": {
												"additionalProperties": false,
												"description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the ConfigMap must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											},
											"secretRef": {
												"additionalProperties": false,
												"description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
												"properties": {
													"optional": {
														"type": "boolean",
														"description": "Specify whether the Secret must be defined"
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
													}
												}
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
								},
								"volumeMounts": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name",
											"mountPath"
										],
										"description": "VolumeMount describes a mounting of a Volume within a container.",
										"properties": {
											"readOnly": {
												"type": "boolean",
												"description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
											},
											"mountPath": {
												"type": "string",
												"description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
											},
											"subPath": {
												"type": [
													"string",
													"null"
												],
												"description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
											},
											"name": {
												"type": "string",
												"description": "This must match the Name of a Volume."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "mountPath"
								},
								"image": {
									"type": "string",
									"description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images"
								},
								"args": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"workingDir": {
									"type": [
										"string",
										"null"
									],
									"description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
								},
								"tty": {
									"type": "boolean",
									"description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
								},
								"terminationMessagePolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
								},
								"ports": {
									"items": {
										"additionalProperties": false,
										"required": [
											"containerPort"
										],
										"description": "ContainerPort represents a network port in a single container.",
										"properties": {
											"hostPort": {
												"type": "integer",
												"description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
												"format": "int32"
											},
											"protocol": {
												"type": [
													"string",
													"null"
												],
												"description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
											},
											"containerPort": {
												"type": "integer",
												"description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
												"format": "int32"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
											},
											"hostIP": {
												"type": [
													"string",
													"null"
												],
												"description": "What host IP to bind the external port to."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "containerPort"
								},
								"health": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"env": {
									"items": {
										"additionalProperties": false,
										"required": [
											"name"
										],
										"description": "EnvVar represents an environment variable present in a Container.",
										"properties": {
											"valueFrom": {
												"additionalProperties": false,
												"description": "EnvVarSource represents a source for the value of an EnvVar.",
												"properties": {
													"secretKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "SecretKeySelector selects a key of a Secret.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the Secret or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key of the secret to select from.  Must be a valid secret key."
															}
														}
													},
													"fieldRef": {
														"additionalProperties": false,
														"required": [
															"fieldPath"
														],
														"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
														"properties": {
															"fieldPath": {
																"type": "string",
																"description": "Path of the field to select in the specified API version."
															},
															"apiVersion": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
															}
														}
													},
													"resourceFieldRef": {
														"additionalProperties": false,
														"required": [
															"resource"
														],
														"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
														"properties": {
															"containerName": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Container name: required for volumes, optional for env vars"
															},
															"resource": {
																"type": "string",
																"description": "Required: resource to select"
															},
															"divisor": {
																"oneOf": [
																	{
																		"type": [
																			"string",
																			"null"
																		]
																	},
																	{
																		"type": "integer"
																	}
																]
															}
														}
													},
													"configMapKeyRef": {
														"additionalProperties": false,
														"required": [
															"key"
														],
														"description": "Selects a key from a ConfigMap.",
														"properties": {
															"optional": {
																"type": "boolean",
																"description": "Specify whether the ConfigMap or it's key must be defined"
															},
															"name": {
																"type": [
																	"string",
																	"null"
																],
																"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
															},
															"key": {
																"type": "string",
																"description": "The key to select."
															}
														}
													}
												}
											},
											"name": {
												"type": "string",
												"description": "Name of the environment variable. Must be a C_IDENTIFIER."
											},
											"value": {
												"type": [
													"string",
													"null"
												],
												"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "List of environment variables to set in the container. Cannot be updated.",
									"x-kubernetes-patch-strategy": "merge",
									"x-kubernetes-patch-merge-key": "name"
								},
								"imagePullPolicy": {
									"type": [
										"string",
										"null"
									],
									"description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
								},
								"readinessProbe": {
									"additionalProperties": false,
									"description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
									"properties": {
										"httpGet": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "HTTPGetAction describes an action based on HTTP Get requests.",
											"properties": {
												"path": {
													"type": [
														"string",
														"null"
													],
													"description": "Path to access on the HTTP server."
												},
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
												},
												"scheme": {
													"type": [
														"string",
														"null"
													],
													"description": "Scheme to use for connecting to the host. Defaults to HTTP."
												},
												"httpHeaders": {
													"items": {
														"additionalProperties": false,
														"required": [
															"name",
															"value"
														],
														"description": "HTTPHeader describes a custom header to be used in HTTP probes",
														"properties": {
															"name": {
																"type": "string",
																"description": "The header field name"
															},
															"value": {
																"type": "string",
																"description": "The header field value"
															}
														}
													},
													"type": [
														"array",
														"null"
													],
													"description": "Custom headers to set in the request. HTTP allows repeated headers."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"timeoutSeconds": {
											"type": "integer",
											"description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"exec": {
											"additionalProperties": false,
											"description": "ExecAction describes a \"run in container\" action.",
											"properties": {
												"command": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
												}
											}
										},
										"initialDelaySeconds": {
											"type": "integer",
											"description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
											"format": "int32"
										},
										"tcpSocket": {
											"additionalProperties": false,
											"required": [
												"port"
											],
											"description": "TCPSocketAction describes an action based on opening a socket",
											"properties": {
												"host": {
													"type": [
														"string",
														"null"
													],
													"description": "Optional: Host name to connect to, defaults to the pod IP."
												},
												"port": {
													"oneOf": [
														{
															"type": [
																"string",
																"null"
															]
														},
														{
															"type": "integer"
														}
													]
												}
											}
										},
										"periodSeconds": {
											"type": "integer",
											"description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
											"format": "int32"
										},
										"successThreshold": {
											"type": "integer",
											"description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
											"format": "int32"
										},
										"failureThreshold": {
											"type": "integer",
											"description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
											"format": "int32"
										}
									}
								},
								"command": {
									"items": {
										"type": [
											"string",
											"null"
										]
									},
									"type": [
										"array",
										"null"
									],
									"description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
								},
								"securityContext": {
									"additionalProperties": false,
									"description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
									"properties": {
										"readOnlyRootFilesystem": {
											"type": "boolean",
											"description": "Whether this container has a read-only root filesystem. Default is false."
										},
										"runAsUser": {
											"type": "integer",
											"description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
											"format": "int64"
										},
										"capabilities": {
											"additionalProperties": false,
											"description": "Adds and removes POSIX capabilities from running containers.",
											"properties": {
												"add": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Added capabilities"
												},
												"drop": {
													"items": {
														"type": [
															"string",
															"null"
														]
													},
													"type": [
														"array",
														"null"
													],
													"description": "Removed capabilities"
												}
											}
										},
										"runAsNonRoot": {
											"type": "boolean",
											"description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
										},
										"seLinuxOptions": {
											"additionalProperties": false,
											"description": "SELinuxOptions are the labels to be applied to the container",
											"properties": {
												"type": {
													"type": [
														"string",
														"null"
													],
													"description": "Type is a SELinux type label that applies to the container."
												},
												"role": {
													"type": [
														"string",
														"null"
													],
													"description": "Role is a SELinux role label that applies to the container."
												},
												"user": {
													"type": [
														"string",
														"null"
													],
													"description": "User is a SELinux user label that applies to the container."
												},
												"level": {
													"type": [
														"string",
														"null"
													],
													"description": "Level is SELinux level label that applies to the container."
												}
											}
										},
										"privileged": {
											"type": "boolean",
											"description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
										}
									}
								},
								"lifecycle": {
									"additionalProperties": false,
									"description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
									"properties": {
										"preStop": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										},
										"postStart": {
											"additionalProperties": false,
											"description": "Handler defines a specific action that should be taken",
											"properties": {
												"httpGet": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "HTTPGetAction describes an action based on HTTP Get requests.",
													"properties": {
														"path": {
															"type": [
																"string",
																"null"
															],
															"description": "Path to access on the HTTP server."
														},
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
														},
														"scheme": {
															"type": [
																"string",
																"null"
															],
															"description": "Scheme to use for connecting to the host. Defaults to HTTP."
														},
														"httpHeaders": {
															"items": {
																"additionalProperties": false,
																"required": [
																	"name",
																	"value"
																],
																"description": "HTTPHeader describes a custom header to be used in HTTP probes",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The header field name"
																	},
																	"value": {
																		"type": "string",
																		"description": "The header field value"
																	}
																}
															},
															"type": [
																"array",
																"null"
															],
															"description": "Custom headers to set in the request. HTTP allows repeated headers."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"tcpSocket": {
													"additionalProperties": false,
													"required": [
														"port"
													],
													"description": "TCPSocketAction describes an action based on opening a socket",
													"properties": {
														"host": {
															"type": [
																"string",
																"null"
															],
															"description": "Optional: Host name to connect to, defaults to the pod IP."
														},
														"port": {
															"oneOf": [
																{
																	"type": [
																		"string",
																		"null"
																	]
																},
																{
																	"type": "integer"
																}
															]
														}
													}
												},
												"exec": {
													"additionalProperties": false,
													"description": "ExecAction describes a \"run in container\" action.",
													"properties": {
														"command": {
															"items": {
																"type": [
																	"string",
																	"null"
																]
															},
															"type": [
																"array",
																"null"
															],
															"description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
														}
													}
												}
											}
										}
									}
								},
								"resources": {
									"additionalProperties": false,
									"description": "ResourceRequirements describes the compute resource requirements.",
									"properties": {
										"requests": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										},
										"limits": {
											"additionalProperties": {
												"oneOf": [
													{
														"type": [
															"string",
															"null"
														]
													},
													{
														"type": "integer"
													}
												]
											},
											"type": "object",
											"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
										}
									}
								},
								"stdinOnce": {
									"type": "boolean",
									"description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers."
					},
					"imagePullSecrets": {
						"items": {
							"additionalProperties": false,
							"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
							"properties": {
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "name"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			]
		},
		"ownerReferences": {
			"items": {
				"additionalProperties": false,
				"required": [
					"apiVersion",
					"kind",
					"name",
					"uid"
				],
				"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
				"properties": {
					"kind": {
						"type": "string",
						"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
					},
					"uid": {
						"type": "string",
						"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"apiVersion": {
						"type": "string",
						"description": "API version of the referent."
					},
					"controller": {
						"type": "boolean",
						"description": "If true, this reference points to the managing controller."
					},
					"blockOwnerDeletion": {
						"type": "boolean",
						"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
					},
					"name": {
						"type": "string",
						"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
			"x-kubernetes-patch-strategy": "merge",
			"x-kubernetes-patch-merge-key": "uid"
		},
		"includeResources": {
			"type": [
				"array",
				"null"
			],
			"description": "List of Kubernetes resource files, that can be directly given to Kubernetes"
		},
		"buildConfigs": {
			"items": {
				"additionalProperties": false,
				"required": [],
				"description": "BuildConfigSpecMod defines OpenShift BuildConfig object",
				"properties": {
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"successfulBuildsHistoryLimit": {
						"type": "integer",
						"description": "successfulBuildsHistoryLimit is the number of old successful builds to retain. If not specified, all successful builds are retained.",
						"format": "int32"
					},
					"postCommit": {
						"additionalProperties": false,
						"description": "A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.\n\nThe build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.\n\nThere are five different ways to configure the hook. As an example, all forms below are equivalent and will execute rake test --verbose.\n\n1. Shell script:\n\n       \"postCommit\": {\n         \"script\": \"rake test --verbose\",\n       }\n\n    The above is a convenient form which is equivalent to:\n\n       \"postCommit\": {\n         \"command\": [\"/bin/sh\", \"-ic\"],\n         \"args\":    [\"rake test --verbose\"]\n       }\n\n2. A command as the image entrypoint:\n\n       \"postCommit\": {\n         \"commit\": [\"rake\", \"test\", \"--verbose\"]\n       }\n\n    Command overrides the image entrypoint in the exec form, as documented in\n    Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.\n\n3. Pass arguments to the default entrypoint:\n\n       \"postCommit\": {\n\t\t      \"args\": [\"rake\", \"test\", \"--verbose\"]\n\t      }\n\n    This form is only useful if the image entrypoint can handle arguments.\n\n4. Shell script with arguments:\n\n       \"postCommit\": {\n         \"script\": \"rake test $1\",\n         \"args\":   [\"--verbose\"]\n       }\n\n    This form is useful if you need to pass arguments that would otherwise be\n    hard to quote properly in the shell script. In the script, $0 will be\n    \"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.\n\n5. Command with arguments:\n\n       \"postCommit\": {\n         \"command\": [\"rake\", \"test\"],\n         \"args\":    [\"--verbose\"]\n       }\n\n    This form is equivalent to appending the arguments to the Command slice.\n\nIt is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.",
						"properties": {
							"args": {
								"items": {
									"type": [
										"string",
										"null"
									]
								},
								"type": [
									"array",
									"null"
								],
								"description": "args is a list of arguments that are provided to either Command, Script or the Docker image's default entrypoint. The arguments are placed immediately after the command to be run."
							},
							"command": {
								"items": {
									"type": [
										"string",
										"null"
									]
								},
								"type": [
									"array",
									"null"
								],
								"description": "command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have /bin/sh, or if you do not want to use a shell. In all other cases, using Script might be more convenient."
							},
							"script": {
								"type": [
									"string",
									"null"
								],
								"description": "script is a shell script to be run with /bin/sh -ic. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with rake test. If you need control over the image entrypoint, or if the image does not have /bin/sh, use Command and/or Args. The -i flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make ruby, bundle and other binaries available in the PATH."
							}
						}
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"strategy": {
						"additionalProperties": false,
						"required": [
							"type"
						],
						"description": "BuildStrategy contains the details of how to perform a build.",
						"properties": {
							"jenkinsPipelineStrategy": {
								"additionalProperties": false,
								"description": "JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build.",
								"properties": {
									"jenkinsfilePath": {
										"type": [
											"string",
											"null"
										],
										"description": "JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir."
									},
									"env": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "env contains additional environment variables you want to pass into a build pipeline."
									},
									"jenkinsfile": {
										"type": [
											"string",
											"null"
										],
										"description": "Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build."
									}
								}
							},
							"sourceStrategy": {
								"additionalProperties": false,
								"required": [
									"from"
								],
								"description": "SourceBuildStrategy defines input parameters specific to an Source build.",
								"properties": {
									"from": {
										"additionalProperties": false,
										"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											},
											"namespace": {
												"type": [
													"string",
													"null"
												],
												"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
											},
											"apiVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "API version of the referent."
											},
											"fieldPath": {
												"type": [
													"string",
													"null"
												],
												"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
											}
										}
									},
									"pullSecret": {
										"additionalProperties": false,
										"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
										"properties": {
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											}
										}
									},
									"incremental": {
										"type": "boolean",
										"description": "incremental flag forces the Source build to do incremental builds if true."
									},
									"env": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "env contains additional environment variables you want to pass into a builder container."
									},
									"scripts": {
										"type": [
											"string",
											"null"
										],
										"description": "scripts is the location of Source scripts"
									},
									"forcePull": {
										"type": "boolean",
										"description": "forcePull describes if the builder should pull the images from registry prior to building."
									}
								}
							},
							"customStrategy": {
								"additionalProperties": false,
								"required": [
									"from"
								],
								"description": "CustomBuildStrategy defines input parameters specific to Custom build.",
								"properties": {
									"from": {
										"additionalProperties": false,
										"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											},
											"namespace": {
												"type": [
													"string",
													"null"
												],
												"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
											},
											"apiVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "API version of the referent."
											},
											"fieldPath": {
												"type": [
													"string",
													"null"
												],
												"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
											}
										}
									},
									"secrets": {
										"items": {
											"additionalProperties": false,
											"required": [
												"secretSource",
												"mountPath"
											],
											"description": "SecretSpec specifies a secret to be included in a build pod and its corresponding mount point",
											"properties": {
												"mountPath": {
													"type": "string",
													"description": "mountPath is the path at which to mount the secret"
												},
												"secretSource": {
													"additionalProperties": false,
													"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
													"properties": {
														"name": {
															"type": [
																"string",
																"null"
															],
															"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
														}
													}
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "secrets is a list of additional secrets that will be included in the build pod"
									},
									"exposeDockerSocket": {
										"type": "boolean",
										"description": "exposeDockerSocket will allow running Docker commands (and build Docker images) from inside the Docker container."
									},
									"env": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "env contains additional environment variables you want to pass into a builder container."
									},
									"pullSecret": {
										"additionalProperties": false,
										"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
										"properties": {
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											}
										}
									},
									"buildAPIVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder"
									},
									"forcePull": {
										"type": "boolean",
										"description": "forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally"
									}
								}
							},
							"dockerStrategy": {
								"additionalProperties": false,
								"description": "DockerBuildStrategy defines input parameters specific to Docker build.",
								"properties": {
									"from": {
										"additionalProperties": false,
										"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											},
											"namespace": {
												"type": [
													"string",
													"null"
												],
												"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
											},
											"apiVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "API version of the referent."
											},
											"fieldPath": {
												"type": [
													"string",
													"null"
												],
												"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
											}
										}
									},
									"buildArgs": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details."
									},
									"noCache": {
										"type": "boolean",
										"description": "noCache if set to true indicates that the docker build must be executed with the --no-cache=true flag"
									},
									"dockerfilePath": {
										"type": [
											"string",
											"null"
										],
										"description": "dockerfilePath is the path of the Dockerfile that will be used to build the Docker image, relative to the root of the context (contextDir)."
									},
									"env": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "EnvVar represents an environment variable present in a Container.",
											"properties": {
												"valueFrom": {
													"additionalProperties": false,
													"description": "EnvVarSource represents a source for the value of an EnvVar.",
													"properties": {
														"secretKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "SecretKeySelector selects a key of a Secret.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the Secret or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key of the secret to select from.  Must be a valid secret key."
																}
															}
														},
														"fieldRef": {
															"additionalProperties": false,
															"required": [
																"fieldPath"
															],
															"description": "ObjectFieldSelector selects an APIVersioned field of an object.",
															"properties": {
																"fieldPath": {
																	"type": "string",
																	"description": "Path of the field to select in the specified API version."
																},
																"apiVersion": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
																}
															}
														},
														"resourceFieldRef": {
															"additionalProperties": false,
															"required": [
																"resource"
															],
															"description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
															"properties": {
																"containerName": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Container name: required for volumes, optional for env vars"
																},
																"resource": {
																	"type": "string",
																	"description": "Required: resource to select"
																},
																"divisor": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Specifies the output format of the exposed resources, defaults to \"1\""
																}
															}
														},
														"configMapKeyRef": {
															"additionalProperties": false,
															"required": [
																"key"
															],
															"description": "Selects a key from a ConfigMap.",
															"properties": {
																"optional": {
																	"type": "boolean",
																	"description": "Specify whether the ConfigMap or it's key must be defined"
																},
																"name": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
																},
																"key": {
																	"type": "string",
																	"description": "The key to select."
																}
															}
														}
													}
												},
												"name": {
													"type": "string",
													"description": "Name of the environment variable. Must be a C_IDENTIFIER."
												},
												"value": {
													"type": [
														"string",
														"null"
													],
													"description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
												}
											}
										},
										"type": [
											"array",
											"null"
										],
										"description": "env contains additional environment variables you want to pass into a builder container."
									},
									"pullSecret": {
										"additionalProperties": false,
										"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
										"properties": {
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
											}
										}
									},
									"forcePull": {
										"type": "boolean",
										"description": "forcePull describes if the builder should pull the images from registry prior to building."
									},
									"imageOptimizationPolicy": {}
								}
							},
							"type": {
								"type": "string",
								"description": "type is the kind of build strategy."
							}
						}
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"failedBuildsHistoryLimit": {
						"type": "integer",
						"description": "failedBuildsHistoryLimit is the number of old failed builds to retain. If not specified, all failed builds are retained.",
						"format": "int32"
					},
					"serviceAccount": {
						"type": [
							"string",
							"null"
						],
						"description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount"
					},
					"nodeSelector": {
						"type": "object",
						"description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored."
					},
					"completionDeadlineSeconds": {
						"type": "integer",
						"description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
						"format": "int64"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"resources": {
						"additionalProperties": false,
						"description": "ResourceRequirements describes the compute resource requirements.",
						"properties": {
							"requests": {
								"type": "object",
								"description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
							},
							"limits": {
								"type": "object",
								"description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
							}
						}
					},
					"revision": {
						"additionalProperties": false,
						"required": [
							"type"
						],
						"description": "SourceRevision is the revision or commit information from the source for the build",
						"properties": {
							"git": {
								"additionalProperties": false,
								"description": "GitSourceRevision is the commit information from a git source for a build",
								"properties": {
									"commit": {
										"type": [
											"string",
											"null"
										],
										"description": "commit is the commit hash identifying a specific commit"
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "message is the description of a specific commit"
									},
									"committer": {
										"additionalProperties": false,
										"description": "SourceControlUser defines the identity of a user of source control",
										"properties": {
											"email": {
												"type": [
													"string",
													"null"
												],
												"description": "email of the source control user"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "name of the source control user"
											}
										}
									},
									"author": {
										"additionalProperties": false,
										"description": "SourceControlUser defines the identity of a user of source control",
										"properties": {
											"email": {
												"type": [
													"string",
													"null"
												],
												"description": "email of the source control user"
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "name of the source control user"
											}
										}
									}
								}
							},
							"type": {
								"type": "string",
								"description": "type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'"
							}
						}
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"triggers": {
						"items": {
							"additionalProperties": false,
							"required": [
								"type"
							],
							"description": "BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.",
							"properties": {
								"bitbucket": {
									"additionalProperties": false,
									"description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
									"properties": {
										"allowEnv": {
											"type": "boolean",
											"description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook."
										},
										"secret": {
											"type": [
												"string",
												"null"
											],
											"description": "secret used to validate requests."
										}
									}
								},
								"github": {
									"additionalProperties": false,
									"description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
									"properties": {
										"allowEnv": {
											"type": "boolean",
											"description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook."
										},
										"secret": {
											"type": [
												"string",
												"null"
											],
											"description": "secret used to validate requests."
										}
									}
								},
								"generic": {
									"additionalProperties": false,
									"description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
									"properties": {
										"allowEnv": {
											"type": "boolean",
											"description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook."
										},
										"secret": {
											"type": [
												"string",
												"null"
											],
											"description": "secret used to validate requests."
										}
									}
								},
								"gitlab": {
									"additionalProperties": false,
									"description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
									"properties": {
										"allowEnv": {
											"type": "boolean",
											"description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook."
										},
										"secret": {
											"type": [
												"string",
												"null"
											],
											"description": "secret used to validate requests."
										}
									}
								},
								"imageChange": {
									"additionalProperties": false,
									"description": "ImageChangeTrigger allows builds to be triggered when an ImageStream changes",
									"properties": {
										"lastTriggeredImageID": {
											"type": [
												"string",
												"null"
											],
											"description": "lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build"
										},
										"from": {
											"additionalProperties": false,
											"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
											"properties": {
												"kind": {
													"type": [
														"string",
														"null"
													],
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"namespace": {
													"type": [
														"string",
														"null"
													],
													"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
												},
												"apiVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "API version of the referent."
												},
												"fieldPath": {
													"type": [
														"string",
														"null"
													],
													"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
												},
												"resourceVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
												},
												"uid": {
													"type": [
														"string",
														"null"
													],
													"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
												}
											}
										}
									}
								},
								"type": {
									"type": "string",
									"description": "type is the type of build trigger"
								}
							}
						},
						"type": "array",
						"description": "triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation."
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"source": {
						"additionalProperties": false,
						"required": [
							"type"
						],
						"description": "BuildSource is the SCM used for the build.",
						"properties": {
							"binary": {
								"additionalProperties": false,
								"description": "BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.",
								"properties": {
									"asFile": {
										"type": [
											"string",
											"null"
										],
										"description": "asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying \"webapp.war\" would place the provided binary as /webapp.war for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'."
									}
								}
							},
							"git": {
								"additionalProperties": false,
								"required": [
									"uri"
								],
								"description": "GitBuildSource defines the parameters of a Git SCM",
								"properties": {
									"httpProxy": {
										"type": [
											"string",
											"null"
										],
										"description": "httpProxy is a proxy used to reach the git repository over http"
									},
									"uri": {
										"type": "string",
										"description": "uri points to the source that will be built. The structure of the source will depend on the type of build to run"
									},
									"ref": {
										"type": [
											"string",
											"null"
										],
										"description": "ref is the branch/tag/ref to build."
									},
									"noProxy": {
										"type": [
											"string",
											"null"
										],
										"description": "noProxy is the list of domains for which the proxy should not be used"
									},
									"httpsProxy": {
										"type": [
											"string",
											"null"
										],
										"description": "httpsProxy is a proxy used to reach the git repository over https"
									}
								}
							},
							"sourceSecret": {
								"additionalProperties": false,
								"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
								"properties": {
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
									}
								}
							},
							"secrets": {
								"items": {
									"additionalProperties": false,
									"required": [
										"secret"
									],
									"description": "SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.",
									"properties": {
										"secret": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										},
										"destinationDir": {
											"type": [
												"string",
												"null"
											],
											"description": "destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the Docker build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during docker build."
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "secrets represents a list of secrets and their destinations that will be used only for the build."
							},
							"dockerfile": {
								"type": [
									"string",
									"null"
								],
								"description": "dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir."
							},
							"type": {
								"type": "string",
								"description": "type of build input to accept"
							},
							"images": {
								"items": {
									"additionalProperties": false,
									"required": [
										"from",
										"paths"
									],
									"description": "ImageSource is used to describe build source that will be extracted from an image. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. A list of paths to copy from the image and their respective destination within the build directory must be specified in the paths array.",
									"properties": {
										"paths": {
											"items": {
												"additionalProperties": false,
												"required": [
													"sourcePath",
													"destinationDir"
												],
												"description": "ImageSourcePath describes a path to be copied from a source image and its destination within the build directory.",
												"properties": {
													"sourcePath": {
														"type": "string",
														"description": "sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination."
													},
													"destinationDir": {
														"type": "string",
														"description": "destinationDir is the relative directory within the build directory where files copied from the image are placed."
													}
												}
											},
											"type": "array",
											"description": "paths is a list of source and destination paths to copy from the image."
										},
										"from": {
											"additionalProperties": false,
											"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
											"properties": {
												"kind": {
													"type": [
														"string",
														"null"
													],
													"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
												},
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												},
												"namespace": {
													"type": [
														"string",
														"null"
													],
													"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
												},
												"apiVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "API version of the referent."
												},
												"fieldPath": {
													"type": [
														"string",
														"null"
													],
													"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
												},
												"resourceVersion": {
													"type": [
														"string",
														"null"
													],
													"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
												},
												"uid": {
													"type": [
														"string",
														"null"
													],
													"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
												}
											}
										},
										"pullSecret": {
											"additionalProperties": false,
											"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
											"properties": {
												"name": {
													"type": [
														"string",
														"null"
													],
													"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
												}
											}
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "images describes a set of images to be used to provide source for the build"
							},
							"contextDir": {
								"type": [
									"string",
									"null"
								],
								"description": "contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository."
							}
						}
					},
					"output": {
						"additionalProperties": false,
						"description": "BuildOutput is input to a build strategy and describes the Docker image that the strategy should produce.",
						"properties": {
							"to": {
								"additionalProperties": false,
								"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
								"properties": {
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
									},
									"namespace": {
										"type": [
											"string",
											"null"
										],
										"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "API version of the referent."
									},
									"fieldPath": {
										"type": [
											"string",
											"null"
										],
										"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
									},
									"resourceVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
									},
									"uid": {
										"type": [
											"string",
											"null"
										],
										"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
									}
								}
							},
							"pushSecret": {
								"additionalProperties": false,
								"description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
								"properties": {
									"name": {
										"type": [
											"string",
											"null"
										],
										"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
									}
								}
							},
							"imageLabels": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "ImageLabel represents a label applied to the resulting image.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name defines the name of the label. It must have non-zero length."
										},
										"value": {
											"type": [
												"string",
												"null"
											],
											"description": "value defines the literal value of the label."
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used."
							}
						}
					},
					"runPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \"Serial\"."
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of OpenShift BuildConfigs"
		},
		"imageStreams": {
			"items": {
				"additionalProperties": false,
				"description": "ImageStreamSpec defines OpenShift ImageStream Object",
				"properties": {
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					},
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"lookupPolicy": {
						"additionalProperties": false,
						"required": [
							"local"
						],
						"description": "ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.",
						"properties": {
							"local": {
								"type": "boolean",
								"description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace."
							}
						}
					},
					"dockerImageRepository": {
						"type": [
							"string",
							"null"
						],
						"description": "dockerImageRepository is optional, if specified this stream is backed by a Docker repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead."
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"tags": {
						"items": {
							"additionalProperties": false,
							"required": [
								"name"
							],
							"description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
							"properties": {
								"importPolicy": {
									"additionalProperties": false,
									"description": "TagImportPolicy controls how images related to this tag will be imported.",
									"properties": {
										"scheduled": {
											"type": "boolean",
											"description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported"
										},
										"insecure": {
											"type": "boolean",
											"description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import."
										}
									}
								},
								"from": {
									"additionalProperties": false,
									"description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
									"properties": {
										"kind": {
											"type": [
												"string",
												"null"
											],
											"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
										},
										"name": {
											"type": [
												"string",
												"null"
											],
											"description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
										},
										"namespace": {
											"type": [
												"string",
												"null"
											],
											"description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
										},
										"apiVersion": {
											"type": [
												"string",
												"null"
											],
											"description": "API version of the referent."
										},
										"fieldPath": {
											"type": [
												"string",
												"null"
											],
											"description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
										},
										"resourceVersion": {
											"type": [
												"string",
												"null"
											],
											"description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
										},
										"uid": {
											"type": [
												"string",
												"null"
											],
											"description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
										}
									}
								},
								"name": {
									"type": "string",
									"description": "Name of the tag"
								},
								"reference": {
									"type": "boolean",
									"description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported."
								},
								"generation": {
									"type": "integer",
									"description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
									"format": "int64"
								},
								"referencePolicy": {
									"additionalProperties": false,
									"required": [
										"type"
									],
									"description": "TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.",
									"properties": {
										"type": {
											"type": "string",
											"description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is Source, indicating the original location of the image should be used (if imported). The user may also specify Local, indicating that the pull spec should point to the integrated Docker registry and leverage the registry's ability to proxy the pull to an upstream registry. Local allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable."
										}
									}
								},
								"annotations": {
									"type": "object",
									"description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags."
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "tags map arbitrary string values to specific image locators"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of OpenShift ImageStreams"
		},
		"name": {
			"type": [
				"string",
				"null"
			],
			"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
		},
		"deletionTimestamp": {
			"type": [
				"string",
				"null"
			],
			"format": "date-time"
		},
		"secrets": {
			"items": {
				"additionalProperties": false,
				"description": "SecretMod defines secret that will be consumed by application",
				"properties": {
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"stringData": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API."
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"type": {
						"type": [
							"string",
							"null"
						],
						"description": "Used to facilitate programmatic handling of secret data."
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"metadata": {
						"additionalProperties": false,
						"description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
						"properties": {
							"uid": {
								"type": [
									"string",
									"null"
								],
								"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
							},
							"deletionTimestamp": {
								"type": [
									"string",
									"null"
								],
								"format": "date-time"
							},
							"clusterName": {
								"type": [
									"string",
									"null"
								],
								"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
							},
							"deletionGracePeriodSeconds": {
								"type": "integer",
								"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
								"format": "int64"
							},
							"labels": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
							},
							"namespace": {
								"type": [
									"string",
									"null"
								],
								"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
							},
							"generation": {
								"type": "integer",
								"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
								"format": "int64"
							},
							"finalizers": {
								"items": {
									"type": [
										"string",
										"null"
									]
								},
								"type": [
									"array",
									"null"
								],
								"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
								"x-kubernetes-patch-strategy": "merge"
							},
							"generateName": {
								"type": [
									"string",
									"null"
								],
								"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
							},
							"initializers": {
								"additionalProperties": false,
								"required": [
									"pending"
								],
								"description": "Initializers tracks the progress of initialization.",
								"properties": {
									"result": {
										"additionalProperties": false,
										"x-kubernetes-group-version-kind": [
											{
												"kind": "Status",
												"version": "v1",
												"group": ""
											}
										],
										"description": "Status is a return value for calls that don't return other objects.",
										"properties": {
											"status": {
												"type": [
													"string",
													"null"
												],
												"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
											},
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"code": {
												"type": "integer",
												"description": "Suggested HTTP return code for this status, 0 if not set.",
												"format": "int32"
											},
											"apiVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
											},
											"reason": {
												"type": [
													"string",
													"null"
												],
												"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
											},
											"details": {
												"additionalProperties": false,
												"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
												"properties": {
													"kind": {
														"type": [
															"string",
															"null"
														],
														"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
													},
													"group": {
														"type": [
															"string",
															"null"
														],
														"description": "The group attribute of the resource associated with the status StatusReason."
													},
													"uid": {
														"type": [
															"string",
															"null"
														],
														"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
													},
													"retryAfterSeconds": {
														"type": "integer",
														"description": "If specified, the time in seconds before the operation should be retried.",
														"format": "int32"
													},
													"causes": {
														"items": {
															"additionalProperties": false,
															"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
															"properties": {
																"field": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
																},
																"message": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
																},
																"reason": {
																	"type": [
																		"string",
																		"null"
																	],
																	"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
																}
															}
														},
														"type": [
															"array",
															"null"
														],
														"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
													},
													"name": {
														"type": [
															"string",
															"null"
														],
														"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
													}
												}
											},
											"message": {
												"type": [
													"string",
													"null"
												],
												"description": "A human-readable description of the status of this operation."
											},
											"metadata": {
												"additionalProperties": false,
												"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
												"properties": {
													"selfLink": {
														"type": [
															"string",
															"null"
														],
														"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
													},
													"resourceVersion": {
														"type": [
															"string",
															"null"
														],
														"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
													}
												}
											}
										}
									},
									"pending": {
										"items": {
											"additionalProperties": false,
											"required": [
												"name"
											],
											"description": "Initializer is information about an initializer that has not yet completed.",
											"properties": {
												"name": {
													"type": "string",
													"description": "name of the process that is responsible for initializing this object."
												}
											}
										},
										"type": "array",
										"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
									}
								}
							},
							"resourceVersion": {
								"type": [
									"string",
									"null"
								],
								"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
							},
							"ownerReferences": {
								"items": {
									"additionalProperties": false,
									"required": [
										"apiVersion",
										"kind",
										"name",
										"uid"
									],
									"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
									"properties": {
										"kind": {
											"type": "string",
											"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
										},
										"uid": {
											"type": "string",
											"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
										},
										"apiVersion": {
											"type": "string",
											"description": "API version of the referent."
										},
										"controller": {
											"type": "boolean",
											"description": "If true, this reference points to the managing controller."
										},
										"blockOwnerDeletion": {
											"type": "boolean",
											"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
										},
										"name": {
											"type": "string",
											"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
										}
									}
								},
								"type": [
									"array",
									"null"
								],
								"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
								"x-kubernetes-patch-strategy": "merge",
								"x-kubernetes-patch-merge-key": "uid"
							},
							"creationTimestamp": {
								"type": [
									"string",
									"null"
								],
								"format": "date-time"
							},
							"annotations": {
								"additionalProperties": {
									"type": [
										"string",
										"null"
									]
								},
								"type": "object",
								"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
							},
							"selfLink": {
								"type": [
									"string",
									"null"
								],
								"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
							},
							"name": {
								"type": [
									"string",
									"null"
								],
								"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
							}
						}
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"data": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							],
							"format": "byte"
						},
						"type": "object",
						"description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
					},
					"kind": {
						"type": [
							"string",
							"null"
						],
						"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"apiVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of Kubernetes Secrets"
		},
		"initializers": {
			"additionalProperties": false,
			"required": [
				"pending"
			],
			"description": "Initializers tracks the progress of initialization.",
			"properties": {
				"result": {
					"additionalProperties": false,
					"x-kubernetes-group-version-kind": [
						{
							"kind": "Status",
							"version": "v1",
							"group": ""
						}
					],
					"description": "Status is a return value for calls that don't return other objects.",
					"properties": {
						"status": {
							"type": [
								"string",
								"null"
							],
							"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
						},
						"kind": {
							"type": [
								"string",
								"null"
							],
							"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
						},
						"code": {
							"type": "integer",
							"description": "Suggested HTTP return code for this status, 0 if not set.",
							"format": "int32"
						},
						"apiVersion": {
							"type": [
								"string",
								"null"
							],
							"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
						},
						"reason": {
							"type": [
								"string",
								"null"
							],
							"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
						},
						"details": {
							"additionalProperties": false,
							"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
							"properties": {
								"kind": {
									"type": [
										"string",
										"null"
									],
									"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"group": {
									"type": [
										"string",
										"null"
									],
									"description": "The group attribute of the resource associated with the status StatusReason."
								},
								"uid": {
									"type": [
										"string",
										"null"
									],
									"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"retryAfterSeconds": {
									"type": "integer",
									"description": "If specified, the time in seconds before the operation should be retried.",
									"format": "int32"
								},
								"causes": {
									"items": {
										"additionalProperties": false,
										"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
										"properties": {
											"field": {
												"type": [
													"string",
													"null"
												],
												"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
											},
											"message": {
												"type": [
													"string",
													"null"
												],
												"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
											},
											"reason": {
												"type": [
													"string",
													"null"
												],
												"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
											}
										}
									},
									"type": [
										"array",
										"null"
									],
									"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
								},
								"name": {
									"type": [
										"string",
										"null"
									],
									"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
								}
							}
						},
						"message": {
							"type": [
								"string",
								"null"
							],
							"description": "A human-readable description of the status of this operation."
						},
						"metadata": {
							"additionalProperties": false,
							"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
							"properties": {
								"selfLink": {
									"type": [
										"string",
										"null"
									],
									"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
								},
								"resourceVersion": {
									"type": [
										"string",
										"null"
									],
									"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
								}
							}
						}
					}
				},
				"pending": {
					"items": {
						"additionalProperties": false,
						"required": [
							"name"
						],
						"description": "Initializer is information about an initializer that has not yet completed.",
						"properties": {
							"name": {
								"type": "string",
								"description": "name of the process that is responsible for initializing this object."
							}
						}
					},
					"type": "array",
					"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
				}
			}
		},
		"routes": {
			"items": {
				"additionalProperties": false,
				"required": [
					"to"
				],
				"properties": {
					"uid": {
						"type": [
							"string",
							"null"
						],
						"description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
					},
					"generation": {
						"type": "integer",
						"description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
						"format": "int64"
					},
					"deletionGracePeriodSeconds": {
						"type": "integer",
						"description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
						"format": "int64"
					},
					"labels": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
					},
					"generateName": {
						"type": [
							"string",
							"null"
						],
						"description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
					},
					"alternateBackends": {
						"items": {
							"additionalProperties": false,
							"required": [
								"kind",
								"name",
								"weight"
							],
							"description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed"
								},
								"name": {
									"type": "string",
									"description": "name of the service/target that is being referred to. e.g. name of the service"
								},
								"weight": {
									"type": "integer",
									"description": "weight as an integer between 0 and 256, default 1, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
									"format": "int32"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference."
					},
					"creationTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"port": {
						"additionalProperties": false,
						"required": [
							"targetPort"
						],
						"description": "RoutePort defines a port mapping from a router to an endpoint in the service endpoints.",
						"properties": {
							"targetPort": {
								"type": "string",
								"description": "The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required"
							}
						}
					},
					"to": {
						"additionalProperties": false,
						"required": [
							"kind",
							"name"
						],
						"description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.",
						"properties": {
							"kind": {
								"type": "string",
								"description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed"
							},
							"name": {
								"type": "string",
								"description": "name of the service/target that is being referred to. e.g. name of the service"
							},
							"weight": {
								"type": "integer",
								"description": "weight as an integer between 0 and 256, default 1, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
								"format": "int32"
							}
						}
					},
					"namespace": {
						"type": [
							"string",
							"null"
						],
						"description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
					},
					"finalizers": {
						"items": {
							"type": [
								"string",
								"null"
							]
						},
						"type": [
							"array",
							"null"
						],
						"description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
						"x-kubernetes-patch-strategy": "merge"
					},
					"resourceVersion": {
						"type": [
							"string",
							"null"
						],
						"description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
					},
					"wildcardPolicy": {
						"type": [
							"string",
							"null"
						],
						"description": "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed."
					},
					"clusterName": {
						"type": [
							"string",
							"null"
						],
						"description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
					},
					"host": {
						"type": "string",
						"description": "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions."
					},
					"ownerReferences": {
						"items": {
							"additionalProperties": false,
							"required": [
								"apiVersion",
								"kind",
								"name",
								"uid"
							],
							"description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
								},
								"uid": {
									"type": "string",
									"description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
								},
								"apiVersion": {
									"type": "string",
									"description": "API version of the referent."
								},
								"controller": {
									"type": "boolean",
									"description": "If true, this reference points to the managing controller."
								},
								"blockOwnerDeletion": {
									"type": "boolean",
									"description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
								},
								"name": {
									"type": "string",
									"description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
								}
							}
						},
						"type": [
							"array",
							"null"
						],
						"description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
						"x-kubernetes-patch-strategy": "merge",
						"x-kubernetes-patch-merge-key": "uid"
					},
					"path": {
						"type": [
							"string",
							"null"
						],
						"description": "Path that the router watches for, to route traffic for to the service. Optional"
					},
					"tls": {
						"additionalProperties": false,
						"required": [
							"termination"
						],
						"description": "TLSConfig defines config used to secure a route and provide termination",
						"properties": {
							"key": {
								"type": [
									"string",
									"null"
								],
								"description": "key provides key file contents"
							},
							"certificate": {
								"type": [
									"string",
									"null"
								],
								"description": "certificate provides certificate contents"
							},
							"caCertificate": {
								"type": [
									"string",
									"null"
								],
								"description": "caCertificate provides the cert authority certificate contents"
							},
							"insecureEdgeTerminationPolicy": {
								"type": [
									"string",
									"null"
								],
								"description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\n* Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port."
							},
							"termination": {
								"type": "string",
								"description": "termination indicates termination type."
							},
							"destinationCACertificate": {
								"type": [
									"string",
									"null"
								],
								"description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify."
							}
						}
					},
					"name": {
						"type": [
							"string",
							"null"
						],
						"description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
					},
					"deletionTimestamp": {
						"type": [
							"string",
							"null"
						],
						"format": "date-time"
					},
					"annotations": {
						"additionalProperties": {
							"type": [
								"string",
								"null"
							]
						},
						"type": "object",
						"description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
					},
					"initializers": {
						"additionalProperties": false,
						"required": [
							"pending"
						],
						"description": "Initializers tracks the progress of initialization.",
						"properties": {
							"result": {
								"additionalProperties": false,
								"x-kubernetes-group-version-kind": [
									{
										"kind": "Status",
										"version": "v1",
										"group": ""
									}
								],
								"description": "Status is a return value for calls that don't return other objects.",
								"properties": {
									"status": {
										"type": [
											"string",
											"null"
										],
										"description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
									},
									"kind": {
										"type": [
											"string",
											"null"
										],
										"description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
									},
									"code": {
										"type": "integer",
										"description": "Suggested HTTP return code for this status, 0 if not set.",
										"format": "int32"
									},
									"apiVersion": {
										"type": [
											"string",
											"null"
										],
										"description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
									},
									"reason": {
										"type": [
											"string",
											"null"
										],
										"description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
									},
									"details": {
										"additionalProperties": false,
										"description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
										"properties": {
											"kind": {
												"type": [
													"string",
													"null"
												],
												"description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
											},
											"group": {
												"type": [
													"string",
													"null"
												],
												"description": "The group attribute of the resource associated with the status StatusReason."
											},
											"uid": {
												"type": [
													"string",
													"null"
												],
												"description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
											},
											"retryAfterSeconds": {
												"type": "integer",
												"description": "If specified, the time in seconds before the operation should be retried.",
												"format": "int32"
											},
											"causes": {
												"items": {
													"additionalProperties": false,
													"description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
													"properties": {
														"field": {
															"type": [
																"string",
																"null"
															],
															"description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
														},
														"message": {
															"type": [
																"string",
																"null"
															],
															"description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
														},
														"reason": {
															"type": [
																"string",
																"null"
															],
															"description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
														}
													}
												},
												"type": [
													"array",
													"null"
												],
												"description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
											},
											"name": {
												"type": [
													"string",
													"null"
												],
												"description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
											}
										}
									},
									"message": {
										"type": [
											"string",
											"null"
										],
										"description": "A human-readable description of the status of this operation."
									},
									"metadata": {
										"additionalProperties": false,
										"description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
										"properties": {
											"selfLink": {
												"type": [
													"string",
													"null"
												],
												"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
											},
											"resourceVersion": {
												"type": [
													"string",
													"null"
												],
												"description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
											}
										}
									}
								}
							},
							"pending": {
								"items": {
									"additionalProperties": false,
									"required": [
										"name"
									],
									"description": "Initializer is information about an initializer that has not yet completed.",
									"properties": {
										"name": {
											"type": "string",
											"description": "name of the process that is responsible for initializing this object."
										}
									}
								},
								"type": "array",
								"description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients."
							}
						}
					},
					"selfLink": {
						"type": [
							"string",
							"null"
						],
						"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
					}
				}
			},
			"type": [
				"array",
				"null"
			],
			"description": "List of OpenShift Routes"
		},
		"selfLink": {
			"type": [
				"string",
				"null"
			],
			"description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
		}
	}
}
`
